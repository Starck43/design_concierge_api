from typing import List

from telegram import Message
from telegram.constants import ParseMode

from bot.constants.keyboards import GROUPS_REG_KEYBOARD, CONFIRM_KEYBOARD
from bot.constants.menus import continue_reg_menu, cancel_reg_menu, start_menu, done_menu, done_reg_menu
from bot.states.registration import RegState
from bot.utils import generate_inline_keyboard


async def start_reg_message(message: Message) -> Message:
	buttons = generate_inline_keyboard(
		GROUPS_REG_KEYBOARD,
		callback_data=[
			str(RegState.SERVICE_GROUP_REGISTRATION),
			str(RegState.SUPPLIER_GROUP_REGISTRATION)
		])

	await message.reply_text(
		"–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.",
		reply_markup=cancel_reg_menu,
	)

	return await message.reply_text(
		"–ö–æ–≥–æ –í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ?",
		reply_markup=buttons,
	)


async def interrupt_reg_message(message: Message, text: str = None) -> None:
	await message.reply_text(
		text or "‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.",
		reply_markup=done_menu
	)


async def registered_yet_message(message: Message) -> None:
	await message.reply_text(
		'*–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n'
		'–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ö–æ–Ω—Å—å–µ—Ä–∂ –°–µ—Ä–≤–∏—Å,\n'
		'–≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—É *start*'
	)


async def welcome_start_message(message: Message, text: str = None) -> None:
	await message.reply_text(
		text or f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–æ–Ω—Å—å–µ—Ä–∂ –°–µ—Ä–≤–∏—Å –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤!\n',
		reply_markup=start_menu
	)


async def check_list_message(message: Message, buttons: List, text: str = None) -> Message:

	reply_markup = generate_inline_keyboard(
		buttons,
		item_key="name",
		callback_data="id",
		vertical=True
	)
	return await message.reply_text(
		text or '–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∏ –Ω–∞–∂–º–∏—Ç–µ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å* ‚¨áÔ∏è',
		reply_markup=reply_markup,
	)

	
async def require_check_list_message(message: Message, text: str = None) -> None:
	await message.reply_text(
		text or "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!",
		reply_markup=continue_reg_menu,
	)
	
	
async def only_in_list_warn_message(message: Message, text: str = None) -> None:
	await message.delete()
	await message.reply_text(
		text or '‚ö†Ô∏è –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞!\n',
		reply_markup=continue_reg_menu,
	)


async def confirm_region_message(message: Message, text: str = None) -> Message:
	buttons = generate_inline_keyboard([CONFIRM_KEYBOARD], callback_data=["yes", "no"])
	return await message.reply_text(
		f'{text}, –≤—Å–µ –≤–µ—Ä–Ω–æ?\n',
		reply_markup=buttons
	)


async def not_found_region_message(message: Message, text: str = None) -> Message:
	return await message.reply_text(
		text or f"‚ö†Ô∏è –†–µ–≥–∏–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {message.text.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
		f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n",
		reply_markup=continue_reg_menu,
	)


async def show_reg_report_message(message: Message, data: str = None) -> Message:
	return await message.reply_text(
		f'üèÅ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n'
		f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–º—Å.\n\n'
		f'{data}',
		reply_markup=done_reg_menu,
		parse_mode=ParseMode.HTML
	)
