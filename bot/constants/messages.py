from typing import List, Dict

from telegram import Message
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from bot.constants.keyboards import GROUPS_REG_KEYBOARD, CONFIRM_KEYBOARD
from bot.constants.menus import (
	continue_reg_menu, cancel_reg_menu, start_menu, done_menu, done_reg_menu, reg_menu
)
from bot.logger import log
from bot.states.registration import RegState
from bot.utils import generate_inline_keyboard


async def before_start_reg_message(message: Message) -> Message:
	return await message.reply_text(
		"–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–∞—à –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª, –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
		reply_markup=reg_menu,
	)


async def start_reg_message(message: Message) -> Message:
	buttons = generate_inline_keyboard(
		GROUPS_REG_KEYBOARD,
		callback_data=[
			str(RegState.SERVICE_GROUP),
			str(RegState.SUPPLIER_GROUP)
		])

	await message.reply_text(
		"–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.",
		reply_markup=cancel_reg_menu,
	)

	return await message.reply_text(
		"–ö–æ–≥–æ –í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ?",
		reply_markup=buttons,
	)


async def interrupt_reg_message(message: Message, text: str = None) -> None:
	await message.reply_text(
		text or "‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.",
		reply_markup=done_menu
	)


async def yet_registered_message(message: Message) -> None:
	await message.reply_text(
		'*–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n'
		'–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ö–æ–Ω—Å—å–µ—Ä–∂ –°–µ—Ä–≤–∏—Å\n',
		reply_markup=start_menu
	)


async def welcome_start_message(message: Message, text: str = None) -> None:
	await message.reply_text(
		text or f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–æ–Ω—Å—å–µ—Ä–∂ –°–µ—Ä–≤–∏—Å –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤!\n',
		reply_markup=start_menu
	)


async def check_categories_message(message: Message, buttons: List, text: str = None) -> Message:
	reply_markup = generate_inline_keyboard(
		buttons,
		item_key="name",
		callback_data="id",
		prefix_callback_name="category_",
		vertical=True
	)
	return await message.reply_text(
		text or '–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∏ –Ω–∞–∂–º–∏—Ç–µ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å* ‚¨áÔ∏è',
		reply_markup=reply_markup,
	)


async def require_check_categories_message(message: Message, text: str = None) -> None:
	await message.reply_text(
		text or "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!",
		reply_markup=continue_reg_menu,
	)


async def only_in_list_warn_message(message: Message, text: str = None) -> Message:
	await message.delete()
	return await message.reply_text(
		text or '‚ö†Ô∏è –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞!\n',
		reply_markup=continue_reg_menu,
	)


async def region_selected_warn_message(message: Message, text: str = None) -> Message:
	return await message.reply_text(
		f'‚ö†Ô∏è  *{text}* –±—ã–ª —É–∂–µ –≤—ã–±—Ä–∞–Ω!\n',
		reply_markup=continue_reg_menu,
	)


async def confirm_region_message(message: Message, text: str = None) -> Message:
	buttons = generate_inline_keyboard([CONFIRM_KEYBOARD], callback_data=["yes", "no"])
	return await message.reply_text(
		f'{text}, –≤—Å–µ –≤–µ—Ä–Ω–æ?\n',
		reply_markup=buttons
	)


async def not_found_region_message(message: Message, text: str = None) -> Message:
	return await message.reply_text(
		text or f"‚ö†Ô∏è –†–µ–≥–∏–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {message.text.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
		        f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n",
		reply_markup=continue_reg_menu,
	)


async def add_new_region_message(message: Message, bot_data: Dict, text: str) -> None:
	if "selected_region_message" in bot_data:
		saved_message = bot_data["selected_region_message"]
		message_text = saved_message.text
		await saved_message.delete()
	else:
		message_text = ""

	bot_data["selected_region_message"] = await message.reply_text(
		message_text + f'\n*{text}* ‚òëÔ∏è',
		reply_markup=continue_reg_menu,
	)


async def show_reg_report_message(message: Message, data: str = None) -> Message:
	return await message.reply_text(
		f'üèÅ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n'
		f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–º—Å.\n\n'
		f'{data}',
		reply_markup=done_reg_menu,
		parse_mode=ParseMode.HTML
	)


async def show_done_reg_message(message: Message) -> None:
	await message.reply_text(
		f'*–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é*\n'
		f'–¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ö–æ–Ω—Å—å–µ—Ä–∂ –°–µ—Ä–≤–∏—Å.',
		reply_markup=start_menu
	)


async def server_error_message(
		message: Message,
		context: ContextTypes.DEFAULT_TYPE,
		error_data: Dict,
		text: str = "",
) -> None:
	user = message.chat
	user_data = context.user_data
	user_data["error"] = error_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
	user_data["status_code"] = error_data.get("status_code", "unknown")
	user_data["url"] = error_data.get("url", "")
	error_text = text or f'{user_data["status_code"]}: {user_data["error"]}\n'
	log.info('User {} got server error {} on request {}: "{}"'.format(
		user.id, user_data["status_code"], user_data["url"], user_data["error"]
	))

	await message.reply_text(
		f"*–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!*\n"
		f"{error_text}\n\n"
		f"–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, {user.first_name}",
		reply_markup=done_menu
	)
	await message.reply_text(
		"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
		reply_markup=generate_inline_keyboard(["–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"])
	)
