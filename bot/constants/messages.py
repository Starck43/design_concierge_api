from typing import List, Optional, Union, Literal

from telegram import (
	Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, Document, PhotoSize
)
from telegram.ext import ContextTypes

from bot.constants.keyboards import (
	CONFIRM_KEYBOARD, DESIGNER_SANDBOX_KEYBOARD, SUBMIT_REG_KEYBOARD, CANCEL_REG_KEYBOARD, START_REG_KEYBOARD,
	SEGMENT_KEYBOARD, REPEAT_KEYBOARD
)
from bot.constants.menus import continue_reg_menu, cancel_reg_menu, start_menu
from bot.constants.static import CAT_GROUP_DATA
from bot.utils import (
	generate_inline_markup, generate_reply_markup, fetch_user_data, update_inline_keyboard
)


async def offer_for_registration_message(message: Message, text: str = None) -> Message:
	return await message.reply_text(
		text or "‚ÑπÔ∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ö–æ–Ω—Å—å–µ—Ä–∂ –°–µ—Ä–≤–∏—Å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!",
		reply_markup=generate_reply_markup([START_REG_KEYBOARD])
	)


async def denied_access_message(message: Message) -> None:
	inline_markup = generate_inline_markup(
		["–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"],
		callback_data="message_for_admin",
	)
	await message.reply_text(
		f'*–î–æ—Å—Ç—É–ø –≤ –ö–æ–Ω—Å—å–µ—Ä–∂ –¥–ª—è –î–∏–∑–∞–π–Ω–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç!*',
		reply_markup=inline_markup
	)


async def submit_reg_data_message(message: Message) -> Message:
	inline_markup = generate_inline_markup(
		[SUBMIT_REG_KEYBOARD + CANCEL_REG_KEYBOARD],
		callback_data=["approve", "cancel"],
		vertical=True
	)

	return await message.reply_text(
		f'‚ùó –í —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã –í–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
		f'–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, —Ç–æ –≤ –±—É–¥—É—â–µ–º —É –í–∞—Å –ø–æ—è–≤–∏—Ç—Å—è —Ç–∞–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å.\n',
		reply_markup=inline_markup
	)


async def success_registration_message(message: Message) -> None:
	await message.reply_text(
		f'*–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!*\n'
		f'–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –≤ –ö–æ–Ω—Å—å–µ—Ä–∂ –°–µ—Ä–≤–∏—Å.',
		reply_markup=start_menu
	)


async def restricted_registration_message(message: Message) -> None:
	await message.reply_text(
		f'*–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! ü§ù*\n'
		f'_–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø –≤ –ö–æ–Ω—Å—å–µ—Ä–∂ –°–µ—Ä–≤–∏—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, '
		f'—Ç–∞–∫ –∫–∞–∫ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã\n'
		f'–í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ '
		f'–∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–∞–º —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —á—Ç–æ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º –∏–ª–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–º_',
		reply_markup=start_menu
	)


# async def fail_registration_message(
# 		message: Message,
# 		reply_markup: Optional[Union[ReplyKeyboardMarkup, InlineKeyboardMarkup]] = None,
# 		text: str = None,
# ) -> None:
# 	await message.reply_text(
# 		text or "‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.\n"
# 		        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ö–æ–Ω—Å—å–µ—Ä–∂ –°–µ—Ä–≤–∏—Å!",
# 		reply_markup=reply_markup
# 	)


async def yet_registered_message(message: Message) -> Message:
	return await message.reply_text(
		'*‚ùï–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n'
		'–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ö–æ–Ω—Å—å–µ—Ä–∂ –°–µ—Ä–≤–∏—Å\n',
		reply_markup=start_menu
	)


async def interrupt_reg_message(message: Message, text: str = None) -> None:
	await message.reply_text(
		text or "*üö´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!*\n",
		reply_markup=ReplyKeyboardRemove()
	)


async def share_link_message(message: Message, link: str, link_text: str, text: str) -> None:
	inline_markup = InlineKeyboardMarkup([[InlineKeyboardButton(link_text, url=link, callback_data="share_link")]])
	await message.reply_text(text, reply_markup=inline_markup)


async def show_categories_message(
		message: Message,
		category_list: List[dict],
		group: int = None,
		title: str = None,
		button_type: Optional[Literal["checkbox", "radiobutton"]] = None
) -> Message:

	inline_markup = generate_inline_markup(
		category_list,
		item_key="name",
		callback_data="id",
		callback_data_prefix=f"group_{group}__category_" if group else "category_",
		vertical=True
	)

	if button_type:
		inline_markup = update_inline_keyboard(
			inline_keyboard=inline_markup.inline_keyboard,
			active_value="",
			button_type=button_type
		)

	return await message.reply_text(
		title or '–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:',
		reply_markup=inline_markup,
	)


async def required_category_warn_message(
		message: Message,
		context: ContextTypes.DEFAULT_TYPE,
		reply_markup: Optional[ReplyKeyboardMarkup] = None,
		text: str = None
) -> Message:
	message = await message.reply_text(
		text or "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!",
		reply_markup=reply_markup,
	)
	context.chat_data["warn_message_id"] = message.message_id
	return message


async def only_in_list_warn_message(
		message: Message,
		context: ContextTypes.DEFAULT_TYPE,
		reply_markup: Optional[ReplyKeyboardMarkup] = None,
		text: str = None
) -> Message:
	message = await message.reply_text(
		text or '‚ö†Ô∏è –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞!\n',
		reply_markup=reply_markup,
	)
	context.chat_data["warn_message_id"] = message.message_id
	return message


async def not_validated_warn_message(
		message: Message,
		context: ContextTypes.DEFAULT_TYPE,
		reply_markup: Optional[ReplyKeyboardMarkup] = None,
		text: str = None
) -> Message:
	message = await message.reply_text(
		text or "‚ùóÔ∏è–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–æ\n",
		reply_markup=reply_markup,
	)
	context.chat_data["warn_message_id"] = message.message_id
	return message


async def show_main_region_message(message: Message, text: str = None) -> Message:
	reply_markup = generate_reply_markup(
		[CANCEL_REG_KEYBOARD],
		one_time_keyboard=False,
		share_location=True
	)

	return await message.reply_text(
		text or "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.",
		reply_markup=reply_markup,
	)


async def show_additional_regions_message(message: Message) -> Message:
	return await message.reply_text(
		text="–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –≤ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã, –≤–æ–∑–º–æ–∂–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å*",
		reply_markup=continue_reg_menu
	)


async def added_new_region_message(message: Message, text: str) -> None:
	await message.reply_text(
		f'‚òëÔ∏è _{text.upper()} –¥–æ–±–∞–≤–ª–µ–Ω!_',
		reply_markup=continue_reg_menu
	)


async def update_top_regions_message(context: ContextTypes.DEFAULT_TYPE) -> None:
	chat_data = context.chat_data
	top_regions_list = chat_data["top_regions"]

	if not top_regions_list:
		if "last_message_id" in chat_data:
			await context.bot.delete_message(
				chat_id=chat_data["chat_id"],
				message_id=chat_data["last_message_id"],
			)

			del chat_data["last_message_id"]
		return

	inline_markup = generate_inline_markup(
		top_regions_list,
		item_key="name",
		callback_data="id",
		callback_data_prefix="region_"
	)

	if "last_message_id" not in chat_data:
		message = await context.bot.send_message(
			chat_id=chat_data["chat_id"],
			text=f'–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π:',
			reply_markup=inline_markup,
		)
		chat_data["last_message_id"] = message.message_id  # –°–æ—Ö—Ä–∞–Ω–∏–º –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

	else:
		await context.bot.edit_message_reply_markup(
			chat_id=chat_data["chat_id"],
			message_id=chat_data["last_message_id"],
			reply_markup=inline_markup
		)


async def confirm_region_message(message: Message, text: str = None) -> Message:
	inline_markup = generate_inline_markup(
		[CONFIRM_KEYBOARD],
		callback_data=["yes", "no"],
		callback_data_prefix="choose_region_"
	)
	return await message.reply_text(
		f'{text}, –≤—Å–µ –≤–µ—Ä–Ω–æ‚ùî',
		reply_markup=inline_markup
	)


async def region_selected_warn_message(message: Message, context: ContextTypes.DEFAULT_TYPE, text: str = None) -> None:
	message = await message.reply_text(
		f'‚ö†Ô∏è *{text}* –±—ã–ª —É–∂–µ –≤—ã–±—Ä–∞–Ω!\n',
		reply_markup=continue_reg_menu,
	)
	context.chat_data["warn_message_id"] = message.message_id


async def not_found_region_message(message: Message, context: ContextTypes.DEFAULT_TYPE, text: str = None) -> None:
	message = await message.reply_text(
		f"‚ö†Ô∏è –†–µ–≥–∏–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{text or message.text}' –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
		f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞.\n",
		reply_markup=continue_reg_menu,
	)
	context.chat_data["warn_message_id"] = message.message_id


async def not_detected_region_message(message: Message, context: ContextTypes.DEFAULT_TYPE, text: str = None) -> None:
	message = await message.reply_text(
		text or "‚ùï–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n"
		        "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.",
		reply_markup=continue_reg_menu,
	)
	context.chat_data["warn_message_id"] = message.message_id


async def required_region_warn_message(message: Message, context: ContextTypes.DEFAULT_TYPE, text: str = None) -> None:
	message = await message.reply_text(
		text or '‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω!',
		reply_markup=cancel_reg_menu,
	)
	context.chat_data["warn_message_id"] = message.message_id


async def offer_to_input_socials_message(message: Message, text: str = None) -> None:
	await message.reply_text(
		text or 'üåê –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Å–∞–π—Ç/—Å–æ—Ü—Å–µ—Ç—å –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ä–µ—Å—É—Ä—Å, –≥–¥–µ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã',
		reply_markup=continue_reg_menu,
	)


async def incorrect_socials_warn_message(message: Message) -> None:
	await message.reply_text(
		'‚ö†Ô∏è –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "http://"',
		reply_markup=continue_reg_menu,
	)


async def offer_to_select_segment_message(message: Message) -> Message:
	buttons = generate_inline_markup(
		SEGMENT_KEYBOARD,
		callback_data_prefix="segment_",
		vertical=True
	)

	return await message.reply_text(
		"üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:",
		reply_markup=buttons
	)


async def offer_to_input_address_message(message: Message) -> Message:
	return await message.reply_text(
		"*üè† –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ä–∞–±–æ—á–∏–π –∞–¥—Ä–µ—Å*",
		reply_markup=continue_reg_menu,
	)


async def success_save_rating_message(message: Message, user_data: dict) -> Message:
	return await message.reply_text(
		f'*‚úÖ –†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*\n'
		f'_–õ–∏—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: ‚≠ê{user_data["related_total_rating"]}_\nÔ∏è'
		f'_–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ‚≠ê{user_data["total_rating"]}Ô∏è_\n'
	)


async def yourself_rate_warning_message(message: Message) -> Message:
	return await message.reply_text(
		f'*‚ùóÔ∏è–ù–µ–ª—å–∑—è –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ü–µ–Ω–∫–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!*',
	)


async def add_new_user_message(message: Message, category: dict) -> Message:
	inline_markup = generate_inline_markup(
		["‚ûï –î–æ–±–∞–≤–∏—Ç—å"],
		callback_data=str(category["group"]),
		callback_data_prefix="add_new_user_",
	)

	group_data = CAT_GROUP_DATA[category["group"]]
	group_title = group_data["title"][:-1] + "–∞"
	return await message.reply_text(
		f'_üó£ –ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ {group_title.lower()} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏_ '
		f'*{category["name"].upper()}*',
		reply_markup=inline_markup
	)


async def verify_by_sms_message(message: Message) -> Message:
	await message.reply_text(
		"–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –∏–∑ —Å–º—Å:",
		reply_markup=cancel_reg_menu,
	)
	button = generate_inline_markup([REPEAT_KEYBOARD], callback_data="input_phone")
	return await message.reply_text(
		f'‚ùï–ï—Å–ª–∏ —Å–º—Å –∫–æ–¥ –Ω–µ –ø—Ä–∏—à–µ–ª –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –Ω–æ–º–µ—Ä–µ, —Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.',
		reply_markup=button,
	)


async def continue_reg_message(message: Message, text: str = None) -> None:
	await message.reply_text(
		text or "–í–æ–∑–º–æ–∂–Ω–æ, —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É, —á—Ç–æ–±—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –í—ã\n"
		        "–ù–∞–∂–º–∏—Ç–µ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
		reply_markup=continue_reg_menu
	)


async def offer_to_cancel_action_message(message: Message, text: str = None) -> Message:
	inline_markup = generate_inline_markup([CONFIRM_KEYBOARD], callback_data=["yes", "no"])
	return await message.reply_text(
		text or '*‚ùó–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã*\n'
		        '–í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
		reply_markup=inline_markup,
	)


async def share_files_message(message: Message, text: str) -> Message:
	inline_markup = generate_inline_markup(
		["üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã"],
		callback_data="share_files",
	)
	return await message.reply_text(text, reply_markup=inline_markup)


async def check_file_size_message(message: Message, limit: int = 5) -> Message:
	file = message.document or message.photo[-1]
	if file and file.file_size > limit * 1024 * 1024:
		return await message.reply_text(
			f'‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞!\n_–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:_ *{limit}–ú–ë*'
		)


async def send_unknown_question_message(
		message: Message,
		context: ContextTypes.DEFAULT_TYPE,
		reply_markup: Optional[ReplyKeyboardMarkup] = None,
		text: str = None
) -> Message:
	message = await message.reply_text(
		text or f'‚ÅâÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n'
		        f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏–Ω–∞—á–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å',
		reply_markup=reply_markup
	)
	context.chat_data["warn_message_id"] = message.message_id
	return message


async def place_new_order_message(message: Message, category: dict = None, text: str = None) -> Message:
	""" –ò–Ω–ª–∞–π–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ """
	inline_markup = generate_inline_markup(["‚ûï –°–æ–∑–¥–∞—Ç—å"], callback_data="place_order")
	title = f'_–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑_'
	if category:
		title += f'_ –Ω–∞ –±–∏—Ä–∂–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏_\n*{category["name"].upper()}*'

	return await message.reply_text(
		f'{text or title}',
		reply_markup=inline_markup,
	)


async def select_events_message(message: Message, text: str = None) -> Message:
	buttons = generate_inline_markup(
		["–ú–µ—Å—Ç–Ω—ã–µ", "–†–æ—Å—Å–∏–π—Å–∫–∏–µ", "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ"],
		callback_data_prefix="event_type_",
		vertical=True
	)

	return await message.reply_text(
		text or f'–ö–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?',
		reply_markup=buttons,
	)


async def choose_sandbox_message(message: Message, text: str = None) -> Message:
	buttons = generate_inline_markup(
		DESIGNER_SANDBOX_KEYBOARD,
		callback_data_prefix="sandbox_type_",
		vertical=False
	)
	return await message.reply_text(
		text or f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≥—Ä—É–ø–ø—É:',
		reply_markup=buttons,
	)


async def failed_questionnaire_message(message: Message) -> Message:
	return await message.reply_text(
		text='*üõë –ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!*\n',
		reply_markup=start_menu
	)


async def empty_questionnaire_list_message(message: Message) -> Message:
	return await message.reply_text(
		text='‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞!',
		reply_markup=start_menu
	)


async def offer_for_questionnaire_message(
		message: Message,
		reply_markup: Optional[Union[ReplyKeyboardMarkup, InlineKeyboardMarkup]] = None
) -> Message:
	return await message.reply_text(
		"–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —ç—Ç–∞–ø–æ–≤:\n"
		"1. _–í—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –∫–µ–º –¥–æ–≤–æ–¥–∏–ª–æ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–∏–¥–∞–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏._\n"
		"2. _–û—Ü–µ–Ω–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º._\n\n",
		reply_markup=reply_markup,
	)


async def show_questionnaire_message(message: Message, text: str = None, link_text: str = None) -> Message:
	button = generate_inline_markup(
		[link_text or "–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"],
		callback_data="questionnaire",
	)

	return await message.reply_text(
		text or "‚ùï–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
		reply_markup=button,
	)


async def success_questionnaire_message(message: Message) -> Message:
	return await message.reply_text(
		text='*‚úÖ –ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n'
		     f'_–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤._\n'
		     f'_–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è_',
		reply_markup=start_menu
	)


async def send_notify_message(
		context: ContextTypes.DEFAULT_TYPE,
		user_id: Union[int, list],
		text: str,
		from_name: str = None,
) -> None:
	"""
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏.
    :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    :param text: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    :param from_name: –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä).
    :return: None
    """
	if not user_id and not text:
		return

	if isinstance(user_id, int):
		user_id = [user_id]

	for _id in user_id:
		res = await fetch_user_data(_id)
		data = res["data"]
		if data and data["user_id"]:
			await context.bot.send_message(
				chat_id=data["user_id"],
				text=f'*üõé –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {"–æ—Ç " + from_name if from_name else ""}*\n\n{text}'
			)
