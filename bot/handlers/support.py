from telegram import Update
from telegram.error import TelegramError
from telegram.ext import ContextTypes

from bot.bot_settings import ADMIN_CHAT_ID
from bot.constants.keyboards import SEND_CONFIRMATION_KEYBOARD, REPLY_KEYBOARD
from bot.constants.patterns import CANCEL_PATTERN, SEND_PATTERN
from bot.handlers.common import (
	get_section, go_back_section, edit_or_reply_message, load_support_data, update_support_data
)
from bot.handlers.upload import upload_files_callback
from bot.states.main import MenuState
from bot.utils import generate_inline_markup, generate_reply_markup, match_query


async def ask_question_to_admin_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
	user_details = context.user_data["details"]
	chat_data = context.chat_data
	local_data = chat_data.setdefault("local_data", {})
	upload_files = chat_data.get("upload_files", {})

	section = get_section(context)
	state = section["state"]
	query_message = update.message.text
	message = None

	if match_query(CANCEL_PATTERN, query_message):
		state = await go_back_section(update, context, "back")
		message = await update.message.reply_text(
			"‚ùï–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞!",
			reply_markup=section["reply_markup"]
		)

	# –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫
	elif local_data.get("reply_to_message"):
		name = local_data["reply_to_message"].get("name")
		chat_id = local_data["reply_to_message"].get("chat_id")
		reply_to_message_id = local_data["reply_to_message"].get("reply_to_message_id")
		answer_text = f'*üîî –û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: *#{reply_to_message_id}*\n'

		try:
			await context.bot.send_message(
				chat_id=chat_id,
				text=f"{answer_text}`{query_message}`",
				reply_to_message_id=reply_to_message_id
			)

		except TelegramError:
			question_text = local_data["reply_to_message"].get("question", "")
			await context.bot.send_message(chat_id=chat_id, text=f'{answer_text}_‚Äú{question_text}‚Äù_\n`{query_message}`')

		# —Å–æ—Ö—Ä–∞–Ω–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
		user_message = await update_support_data(
			update.message,
			context,
			user_id=chat_id,
			message_id=reply_to_message_id,
			data={"answer": query_message}
		)
		if user_message and user_message["is_replied"]:
			text = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ!"
		else:
			text = "‚ùóÔ∏è–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!"

		message = await update.message.reply_text(
			f'‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n*{name}*\n_{text}_\n–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: *#{reply_to_message_id}*',
			reply_markup=section["reply_markup"]
		)
		section["messages"].append(message.message_id)
		local_data["reply_to_message"].clear()

	# –æ–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –ü—Ä–æ—Ñ–∏–ª—å -> –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
	elif local_data.get("message_for_admin"):
		menu_markup = generate_reply_markup([SEND_CONFIRMATION_KEYBOARD])
		section["reply_markup"] = menu_markup
		message_for_admin = local_data["message_for_admin"]
		no_attached_files = not (upload_files.get("photo") or upload_files.get("document"))

		# —Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–µ—Ç–µ–ª –≤–ø–µ—Ä–≤—ã–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		if not message_for_admin["question"]:
			message_for_admin["question"] = query_message
			message_for_admin["message_id"] = update.message.message_id

			# –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
			if no_attached_files:
				message = await update.message.reply_text(
					text=f'–ï—Å–ª–∏ –µ—â–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏, —Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å—é–¥–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π',
					reply_markup=menu_markup
				)
				chat_data["last_message_id"] = message.message_id
				return state

		elif not match_query(SEND_PATTERN, query_message):
			message = await edit_or_reply_message(
				context,
				text=f'–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å',
				message=chat_data.get("last_message_id"),
				message_type="info",
				return_message_id=False,
				reply_markup=menu_markup
			)
			chat_data["last_message_id"] = message.message_id
			return state

		# –¥–∞–ª–µ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
		message_id = message_for_admin["message_id"]
		message_text = f'üîî –í–æ–ø—Ä–æ—Å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç *@{user_details["name"]}* (ID:{user_details["user_id"]})\n'
		message_text += f'*#{message_id}*: {message_for_admin["question"]}'

		inline_markup = generate_inline_markup(
			REPLY_KEYBOARD,
			callback_data=f'reply_to_{user_details["user_id"]}__message_id_{message_id}'
		)
		# —Å–æ—Ö—Ä–∞–Ω–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –≤ –ë–î
		user_message = await update_support_data(
			update.message,
			context,
			user_id=user_details["user_id"],
			message_id=message_id,
			data={"question": message_for_admin["question"]}
		)

		# –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
		if no_attached_files:
			await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message_text, reply_markup=inline_markup)

		# –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω—ã —Ñ–∞–π–ª—ã, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –∏ —Ñ–∞–π–ª—ã –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–∏–º –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
		else:
			if not user_message:
				message_text += f'\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'
			await upload_files_callback(update, context, text=message_text, reply_markup=inline_markup)

		message_for_admin.clear()
		state = await go_back_section(update, context, "back")
		section = get_section(context)

		# TODO: –¥–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –¥–∞—Ç—É –æ—Ç–≤–µ—Ç–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
		message = await update.message.reply_text(
			text=f'‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º *#{message_id}*\n'
			     f'–ü–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –í–∞–º –ø—Ä–∏–¥–µ—Ç –æ—Ç–≤–µ—Ç.',
			reply_markup=section["reply_markup"]
		)
		context.chat_data["last_message_id"] = message.message_id

	# –æ—Ç–ø—Ä–∞–≤–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–µ–∫—Ü–∏–∏ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
	elif not section["state"] == MenuState.SUPPORT:
		message_id = update.message.message_id
		message_text = f'üîî –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç *{user_details["name"]}* (ID:{user_details["user_id"]})\n\n' \
		               f'`{query_message}`'
		# –æ–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
		user_message = await update_support_data(
			update.message,
			context,
			user_id=user_details["user_id"],
			message_id=message_id,
			data={"question": query_message}
		)
		if user_message:
			text = f"–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: *#{message_id}*"
		else:
			text = "_–ù–æ–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω!_"

		inline_markup = generate_inline_markup(
			REPLY_KEYBOARD,
			callback_data=f'reply_to_{user_details["user_id"]}__message_id_{message_id}'
		)
		await context.bot.send_message(
			chat_id=ADMIN_CHAT_ID,
			text=f'{message_text}\n{text}',
			reply_markup=inline_markup
		)

		context.chat_data["last_message_id"] = await edit_or_reply_message(
			context,
			text=f"‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ö–æ–Ω—Å—å–µ—Ä–∂ –°–µ—Ä–≤–∏—Å!\n{text}",
			message=chat_data.get("last_message_id"),
			reply_markup=section["reply_markup"]
		)

	if message:
		section["messages"].append(message.message_id)

	return state


async def reply_to_user_message_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
	""" –ö–æ–ª–±—ç–∫ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """

	query = update.callback_query
	await query.answer()

	query_data = query.data.rsplit("__")
	user_id = query_data[0].lstrip("reply_to_")
	message_id = int(query_data[1].lstrip("message_id_"))

	section = get_section(context)
	local_data = context.chat_data.setdefault("local_data", {})
	user_message = await load_support_data(query.message, context, message_id=message_id, user_id=user_id)
	if user_message and user_message["is_replied"]:
		message = await query.message.reply_text(
			f'–í–æ–ø—Ä–æ—Å –±—ã–ª —Ä–∞–Ω–µ–µ –∑–∞–∫—Ä—ã—Ç!\n–û–±—Ä–∞—â–µ–Ω–∏–µ: *#{user_message.get("message_id")}*',
			reply_markup=section["reply_markup"]
		)
		section["messages"].append(message.message_id)
		return section["state"]

	else:
		message = await query.message.reply_text(f'–ß—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?')

	reply_to_message = local_data.setdefault('reply_to_message', {**user_message})
	reply_to_message["reply_to_message_id"] = user_message["message_id"]
	reply_to_message["message_id"] = message.message_id  # —Å–æ—Ö—Ä–∞–Ω–∏–º id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞ –Ω–æ–≤–æ–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞

	return MenuState.SUPPORT
