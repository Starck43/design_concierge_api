from typing import Optional

from telegram import Message, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from bot.constants.keyboards import SEGMENT_KEYBOARD
from bot.handlers.common import select_supplier_segment, edit_or_reply_message
from bot.handlers.rating import show_total_detail_rating
from bot.states.group import Group
from bot.utils import (
	extract_fields, format_output_text, format_output_link, detect_social, generate_map_url, calculate_years_of_work,
)


async def show_user_card_message(
		context: ContextTypes.DEFAULT_TYPE,
		user: dict,
		message_id: int = None,
		reply_markup: InlineKeyboardMarkup = None,
		show_all: bool = True
) -> Optional[Message]:
	# TODO: –†–µ—à–∏—Ç—å –∫–∞–∫–∏–µ –ø–æ–ª—è —Å–∫—Ä—ã–≤–∞—Ç—å –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ (show_all)
	# TODO: —Å–¥–µ–ª–∞—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Å—ã–ª–æ–∫ –≤ detect_social
	# TODO: —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–µ–π –æ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö:
	#  –ø—Ä–∏ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –±–∏—Ä–∂–µ —É—Å–ª—É–≥ –∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
	if not user:
		return

	context.chat_data["last_message_id"] = None
	rating_string = f' ‚≠ê{user["total_rating"]}' if user.get("total_rating") else ""
	address_caption = f'{user["address"]} (–Ω–∞ –∫–∞—Ä—Ç–µ)' if user.get("address") else ""
	geo_link = generate_map_url(user.get("address"), user["name"])
	categories = extract_fields(user.get("categories"), field_names="name")
	regions = extract_fields(user.get("regions"), field_names="name")
	main_region = user.get("main_region", {}).get("name", None)
	work_experience = calculate_years_of_work(user.get("business_start_year"))
	segment = None
	done_orders = None
	placed_orders = None
	executor_done_orders = None

	if Group.has_role(user, Group.DESIGNER):
		# —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
		placed_orders = user.get("placed_orders_count")
		# —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
		done_orders = user.get("done_orders_count")

	if Group.has_role(user, Group.OUTSOURCER):
		# —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
		executor_done_orders = user.get("executor_done_orders_count")

	if Group.has_role(user, Group.SUPPLIER):
		if not user.get("segment") is None:
			segment = SEGMENT_KEYBOARD[user["segment"]]
		else:
			segment = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

	# –æ—Ç–æ–±—Ä–∞–∑–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	inline_message = await edit_or_reply_message(
		context,
		f'{format_output_text("", user["name"] + rating_string, tag="*")}'
		f'{format_output_text("", user.get("description"), tag="_")}'
		f'\n'
		f'{format_output_link(geo_link, caption=address_caption, icon="üìç")}'
		f'{format_output_link(user.get("phone"), icon="üìûÔ∏è", link_type="tel")}'
		f'{format_output_link(user.get("email"), icon="üìß", link_type="email")}'
		f'{format_output_link(user.get("site_url"), icon="üåê")}'
		f'{format_output_link(**detect_social(user.get("socials_url")))}'
		f'{format_output_text("–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", categories, default_value="–Ω–µ –≤—ã–±—Ä–∞–Ω–∞", tag="`")}'
		f'{format_output_text("–û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–≥–∏–æ–Ω", main_region, default_value="–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", tag="`")}'
		f'{format_output_text("–î—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã", regions, tag="`")}'
		f'{format_output_text("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", work_experience, tag="`")}'
		f'{format_output_text("–°–µ–≥–º–µ–Ω—Ç", segment, tag="`")}'
		f'\n'
		f'{format_output_text("–†–∞–∑–º–µ—â–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤", placed_orders, tag="`")}'
		f'{format_output_text("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤", done_orders, tag="`")}'
		f'{format_output_text("–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤", executor_done_orders, tag="`")}',
		message=message_id,
		return_message_id=False,
		reply_markup=reply_markup
	)
	
	await select_supplier_segment(context, user=user)
	await show_total_detail_rating(context, user=user)

	return inline_message
