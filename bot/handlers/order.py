from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError
from telegram.ext import ContextTypes

from bot.constants.keyboards import (
	ORDER_ACTIONS_KEYBOARD, MODIFY_KEYBOARD, REMOVE_KEYBOARD, ORDER_RESPOND_KEYBOARD, ORDER_EXECUTOR_KEYBOARD,
	CANCEL_KEYBOARD, CONTINUE_KEYBOARD
)
from bot.constants.menus import back_menu
from bot.constants.messages import send_notify_message
from bot.constants.patterns import CANCEL_PATTERN, CONTINUE_PATTERN
from bot.constants.static import ORDER_FIELD_DATA, ORDER_RESPONSE_MESSAGE_TEXT
from bot.entities import TGMessage
from bot.handlers.common import (
	get_section, update_order, go_back_section, edit_or_reply_message, load_orders,
	prepare_current_section, get_order_status, order_has_approved_executor, show_order_related_users, add_section,
	delete_messages_by_key, update_section, generate_categories_list
)
from bot.states.main import MenuState
from bot.utils import (
	match_query, data_to_string, validate_number, validate_date, extract_fields, get_formatted_date,
	generate_inline_markup, find_obj_in_list, format_output_text, update_text_by_keyword, generate_reply_markup
)


async def add_order_fields_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
	""" –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –Ω–∞ –±–∏—Ä–∂–µ """

	section = get_section(context)
	query_message = update.message.text

	chat_data = context.chat_data
	local_data = chat_data.setdefault("local_data", {})
	field_name = local_data.get("order_field_name")
	order_id = local_data.get("order_id")

	# –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É –∑–∞–∫–∞–∑–∞, —Ç–æ –ø—Ä–µ—Ä–≤–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –∞–µ—Ä–Ω–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
	if match_query(CANCEL_PATTERN, query_message):
		if order_id:  # —É–¥–∞–ª–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
			await update_order(update.message, context, int(order_id), method="DELETE")

		state = await go_back_section(update, context, "back")
		message = await update.message.reply_text(
			"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!",
			reply_markup=get_section(context).get("reply_markup")
		)
		chat_data["last_message_id"] = message.message_id
		return state

	# –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π order_data
	elif match_query(CONTINUE_PATTERN, query_message) and not local_data["order_data"].get("categories"):
		await update.message.delete()
		selected_categories = local_data.pop("selected_categories", None)
		if selected_categories:
			local_data["order_data"] = {"categories": list(selected_categories.keys())}
			return await new_order_callback(update, context)
		else:
			text = "–ú–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤—ã–±–∏—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞!"
			await edit_or_reply_message(context, text=text, message_type="warn", lifetime=3)
			return section["state"]

	elif not field_name:
		await update.message.delete()
		text = "–ú–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤—ã–±–∏—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞!"
		await edit_or_reply_message(context, text=text, message_type="warn", lifetime=3)
		return section["state"]

	# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	state = await modify_order_fields_choice(update, context)
	if not state:  # –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
		return section["state"]

	if field_name == "title":
		field_name = "description"
		title = "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"

	elif field_name == "description":
		field_name = "price"
		title = f'–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –∑–∞ —Ä–∞–±–æ—Ç—ã'

	elif field_name == "price":
		field_name = "expire_date"
		title = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ \\*Ô∏è‚É£ –µ—Å–ª–∏ —Å—Ä–æ–∫ –Ω–µ –æ—Ä–≥–∞–Ω–∏—á–µ–Ω"

	else:
		field_name = None
		title = None
		chat_data["local_data"].pop("order_data")

	if field_name and title:
		message = await update.message.reply_text(title, reply_markup=section["reply_markup"])
		chat_data["last_message_ids"].update({f'{field_name}_question': message.message_id})
		chat_data["local_data"].update({"order_field_name": field_name})

	if not field_name:  # –µ—Å–ª–∏ –∫–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π
		order = await load_orders(update.message, context, order_id=order_id)
		state = await go_back_section(update, context, "back")
		if order:
			message = await update.message.reply_text(
				f'‚úÖ –í–∞—à –∑–∞–∫–∞–∑ _{order["title"]}_\n'
				f'—É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ —É—Å–ª—É–≥!\n'
				f'üóÉ _{data_to_string(order.get("categories"), field_names="name", separator=", ")}_',
				reply_markup=get_section(context).get("reply_markup")
			)
			chat_data["last_message_id"] = message.message_id
		return state

	return section["state"]


async def modify_order_fields_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
	""" –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –∑–∞–∫–∞–∑–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞ """
	section = get_section(context)
	is_new_order = section["state"] == MenuState.ADD_ORDER

	chat_data = context.chat_data
	last_message_ids = chat_data.setdefault("last_message_ids", {})
	local_data = chat_data.setdefault("local_data", {})
	order_data = local_data.setdefault("order_data", {})
	field_name = local_data["order_field_name"]
	field_value = update.message.text.strip()
	message_text = field_value

	if field_name == "price":
		price = validate_number(field_value)
		if not price:
			await update.message.delete()
			chat_data["warn_message_id"] = await edit_or_reply_message(
				context,
				text=f'–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥',
				message=last_message_ids.get(field_name),
				message_type="warn",
				reply_markup=section["reply_markup"]
			)
			return

		field_value = price
		message_text = f'{field_value}‚ÇΩ'

	if field_name == "expire_date":
		if field_value != "*":
			date = validate_date(field_value)
			if not date:
				await update.message.delete()
				message = await edit_or_reply_message(
					context,
					message=last_message_ids.get(field_name),
					text=f'–î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n_–î–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥ –∏–ª–∏ *_',
					message_type="warn",
					reply_markup=section["reply_markup"]
				)
				chat_data["warn_message_id"] = message.message_id
				return

			message_text, field_value = date

		else:
			field_value = None
			message_text = "–±–µ—Å—Å—Ä–æ—á–Ω–æ"

		local_data["order_data"] = {"status": 1}

	data_changed = True
	order_data.update({field_name: field_value})
	order_id = local_data.get("order_id", None)
	if order_id:
		order = await load_orders(update.message, context, order_id=order_id)
		if not order:
			return
		data_changed = not bool(order[field_name] == field_value)

	order, error_text = await update_order(update.message, context, order_id, data=local_data["order_data"])
	if error_text:
		chat_data["warn_message_id"] = await edit_or_reply_message(
			context,
			message=last_message_ids.get(field_name),
			text=error_text,
			reply_markup=section["reply_markup"],
		)
		return

	await update.message.delete()
	local_data["order_data"] = {}
	if not order_id:
		local_data["order_id"] = order["id"]

	if data_changed:
		message_text = f'‚úÖ *{message_text}*'

	elif field_name == "expire_date":
		message_text = f'‚úÖ *{message_text}*'

	else:
		message_text = f'‚ùï *{message_text}*\n_–¥–∞–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã!_'

	if not is_new_order:  # –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, —Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ–ª—è
		message_text = f'{ORDER_FIELD_DATA[field_name]}:\n' + message_text

	message_id = await edit_or_reply_message(
		context,
		text=message_text,
		message=last_message_ids.get(field_name),
		reply_markup=section["reply_markup"]
	)

	# —Å–æ—Ö—Ä–∞–Ω–∏–º id –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
	last_message_ids.update({field_name: message_id})

	return section["state"]


async def show_order_details_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
	""" –ö–æ–ª–±—ç–∫ –≤—ã–≤–æ–¥–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É """
	query = update.callback_query
	if query:
		await query.answer()
	else:
		query = update

	section = await prepare_current_section(context)
	query_data = section.get("query_message") or query.data
	order_id = int(query_data.lstrip("order_"))

	order = await load_orders(query.message, context, order_id=order_id)
	if not order:
		return section["state"]

	order_status, _ = get_order_status(order)
	order_price = f'{order["price"]}‚ÇΩ' if order["price"] else "–ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
	category_list = " / ".join(extract_fields(order["categories"], "name")).lower()

	# —Å–æ—Ö—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–ª–±—ç–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∏ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–≤–Ω—è—Ö –º–µ–Ω—é
	local_data = context.chat_data.setdefault("local_data", {})
	local_data.update({
		"order_id": order_id,
		"executor_id": order.get("executor", None)
	})
	user_role = section.get("user_role", "contender")
	user_is_owner = order["owner"] == context.user_data["details"]["id"]
	user_is_contender = order["executor"] == context.user_data["details"]["id"]
	date_string, expire_date, current_date = get_formatted_date(order["expire_date"])

	state = section["state"]
	menu_markup = back_menu

	message = await query.message.reply_text(f'*{order["title"]}*', reply_markup=menu_markup)
	messages = [message]
	inline_markup = None

	if user_role != "creator" and user_is_contender:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–º
		if order["status"] == 1:  # –∏ –∑–∞–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã–π
			if order_has_approved_executor(order):  # –∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, —Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É
				inline_markup = generate_inline_markup(
					ORDER_ACTIONS_KEYBOARD[4],
					callback_data=f'order_{order_id}__action_4'
				)

			else:  # –∏–Ω–∞—á–µ –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
				inline_markup = generate_inline_markup(
					[[ORDER_ACTIONS_KEYBOARD[2]], [ORDER_ACTIONS_KEYBOARD[3]]],
					callback_data=['2', '3'],
					callback_data_prefix=f'order_{order_id}__action_'
				)

	elif user_role == "creator" and user_is_owner:
		if order["status"] == 0:  # –∑–∞–∫–∞–∑ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å
			if not expire_date or current_date <= expire_date:  # –µ—Å–ª–∏ —Å—Ä–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω, —Ç–æ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å
				inline_markup = generate_inline_markup(
					[[ORDER_ACTIONS_KEYBOARD[0]], MODIFY_KEYBOARD, REMOVE_KEYBOARD],
					callback_data=['0', '10', '11'],
					callback_data_prefix=f'order_{order_id}__action_'
				)

			else:
				inline_markup = generate_inline_markup(
					[MODIFY_KEYBOARD, REMOVE_KEYBOARD],
					callback_data=['10', '11'],
					callback_data_prefix=f'order_{order_id}__action_'
				)

		elif order['executor']:  # –µ—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –≤—ã–±—Ä–∞–ª –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
			if order["status"] == 4:  # –∑–∞–∫–∞–∑ –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ç–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å
				inline_markup = generate_inline_markup(
					REMOVE_KEYBOARD,
					callback_data=f'order_{order_id}__action_11'
				)

			elif order["status"] == 2:  # –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞–¥–∏–∏ —Å–¥–∞—á–∏, —Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–æ–ø–∫–∏: –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
				inline_markup = generate_inline_markup(
					[[ORDER_ACTIONS_KEYBOARD[5]], [ORDER_ACTIONS_KEYBOARD[6]]],
					callback_data=['5', '6'],
					callback_data_prefix=f'order_{order_id}__action_'
				)

			elif order["status"] == 1:  # –∑–∞–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã–π
				# –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑, —Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
				if order_has_approved_executor(order):
					inline_markup = generate_inline_markup(
						ORDER_ACTIONS_KEYBOARD[7],
						callback_data=f'order_{order_id}__action_7'
					)

		elif order["status"] == 1:  # –µ—Å–ª–∏ —É –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –∑–∞–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã–π
			# –∏ —Å—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –∏—Å—Ç–µ–∫ –∏–ª–∏ –¥–∞—Ç–∞ –±–µ—Å—Å—Ä–æ—á–Ω–∞—è, —Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
			if not expire_date or current_date <= expire_date:
				inline_markup = generate_inline_markup(
					ORDER_ACTIONS_KEYBOARD[1],
					callback_data=f'order_{order_id}__action_1'
				)
			else:  # –µ—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, —Ç–æ —Å–º–µ–Ω–∏–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ —Ä–∞–∑—Ä–µ—à–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å
				inline_markup = generate_inline_markup(
					[MODIFY_KEYBOARD, REMOVE_KEYBOARD],
					callback_data=['10', '11'],
					callback_data_prefix=f'order_{order_id}__action_'
				)
				# –æ–±–Ω–æ–≤–∏–º –∑–∞–ø–∏—Å—å –∏ –ø–æ–ª—É—á–∏–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
				data = {"status": 0, "responded_users": []}
				order, error_text = await update_order(query.message, context, order_id, data=data)
				if error_text:
					message = await query.message.reply_text(text=error_text)
					context.chat_data["warn_message_id"] = message.message_id

				order_status, _ = get_order_status(order)

	# –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –∏ –∑–∞–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã–π, —Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–º –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –∏–ª–∏ —Å–Ω—è—Ç—å –æ—Ç–∫–ª–∏–∫
	elif order["status"] == 1:
		user_id = context.user_data["details"]["id"]
		responded_user, _ = find_obj_in_list(order["responded_users"], {"id": user_id})
		action_code = int(bool(responded_user))  # —Ñ–ª–∞–≥: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏—Ö—Å—è –∏–ª–∏ –Ω–µ—Ç
		responded_user_counter = f' ({len(order["responded_users"]) or "0"})'
		inline_markup = generate_inline_markup(
			[ORDER_RESPOND_KEYBOARD[action_code] + responded_user_counter],
			callback_data=f'order_{order_id}__action_{20 + action_code}'
		)

	message = await query.message.reply_text(
		f'`{order["description"]}`'
		f'{format_output_text("_–ö–∞—Ç–µ–≥–æ—Ä–∏—è_", category_list, tag="_")}\n'
		f'{format_output_text("–ê–≤—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", order["owner_name"] if not user_is_owner else "", tag="*")}'
		f'{format_output_text(ORDER_FIELD_DATA["price"], order_price, tag="*")}'
		f'{format_output_text(ORDER_FIELD_DATA["expire_date"], date_string if date_string else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", tag="*")}\n'
		f'{format_output_text("–°—Ç–∞—Ç—É—Å", order_status, tag="*")}',
		reply_markup=inline_markup
	)
	messages.append(message)

	# –æ—Ç–æ–±—Ä–∞–∑–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –≤—Å–µ—Ö –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑ –¥–∏–∑–∞–π–Ω–µ—Ä–∞,
	# –µ—Å–ª–∏ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞–∫–∞–∑–∞, –∞ –Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
	if user_role == "creator" and order["status"] > 0:
		messages += await show_order_related_users(query.message, context, order)

	add_section(
		context,
		state=state,
		messages=messages,
		query_message=query_data,
		reply_markup=menu_markup,
		save_full_messages=True
	)

	return state


async def manage_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
	""" –ö–æ–ª–±—ç–∫ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º """

	query = update.callback_query
	await query.answer()

	section = get_section(context)
	query_data = query.data
	query_list = query_data.split('__')

	if len(query_list) < 2:
		return None

	user_id = context.user_data["details"]["id"]
	local_data = context.chat_data.setdefault("local_data", {})
	executor_id = local_data.get("executor_id", None)
	order_id = int(query_list[0].lstrip("order_"))
	action_code = int(query_list[1].lstrip("action_"))
	order = await load_orders(query.message, context, order_id)
	status = order["status"]
	notify_message = {}
	decline_notify_message = {}
	params = {}

	tg_messages = section["messages"]
	title_message = tg_messages.pop(0)  # –∏–∑–≤–ª–µ—á–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
	order_details_message = tg_messages.pop(0)  # –∏–∑–≤–ª–µ—á–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
	inline_markup = None
	action_message = {"message": context.chat_data.get("last_message_id", None)}

	# –µ—Å–ª–∏ –∑–∞–∫–∞–∑ —É–¥–∞–ª—è–µ—Ç—Å—è
	if action_code == 11:
		action_message["text"] = "_–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–≤—Å–µ–≥–¥–∞?_"
		action_message["reply_markup"] = generate_inline_markup(
			["–î–∞, —Ö–æ—á—É", "–ù–µ—Ç, –ø–µ—Ä–µ–¥—É–º–∞–ª"],
			callback_data=["yes", "no"],
			callback_data_prefix=f'remove_order_{order_id}__'
		)

	# –µ—Å–ª–∏ –∑–∞–∫–∞–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
	elif action_code == 10:
		action_message["text"] = "_–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å ?_"
		action_message["reply_markup"] = generate_inline_markup(
			list(ORDER_FIELD_DATA.values()),
			callback_data=list(ORDER_FIELD_DATA.keys()),
			callback_data_prefix=f'modify_order_{order_id}__'
		)

	# –µ—Å–ª–∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –∏–ª–∏ –æ—Ç–æ–∑–≤–∞–ª —Å–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –µ—â–µ –¥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	elif action_code in [20, 21]:
		action_index = action_code - 20
		action_message["text"] = ORDER_RESPONSE_MESSAGE_TEXT[action_index]
		action_message["error"] = f'–ù–µ —É–¥–∞–ª–æ—Å—å {"—Å–Ω—è—Ç—å" if action_index == 1 else "–æ—Å—Ç–∞–≤–∏—Ç—å"} –í–∞—à—É –∑–∞—è–≤–∫—É'

		if action_index == 0:  # –µ—Å–ª–∏ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –∑–∞–∫–∞–∑
			params = {"add_user": user_id}
			username = context.user_data["details"]["name"] or context.user_data["details"]["username"]
			message_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –í–∞—à –∑–∞–∫–∞–∑:\n _"{order["title"]}"_\n'
			notify_message = {"user_id": order["owner"], "from_name": username, "text": message_text}
			responded_user_counter = f' ({len(order["responded_users"]) + 1})'

		else:  # –µ—Å–ª–∏ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç –Ω–∞ –∑–∞–∫–∞–∑ –æ—Ç–∑—ã–≤–∞–µ—Ç —Å–≤–æ–π –æ—Ç–∫–ª–∏–∫ –¥–æ –≤—ã–±–æ—Ä–∞ –µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
			params = {"remove_user": user_id}
			responded_user_counter = f' ({len(order["responded_users"]) - 1 if order["responded_users"] else 0})'

		action_index = abs(action_code - 21)
		inline_markup = generate_inline_markup(
			[ORDER_RESPOND_KEYBOARD[action_index] + responded_user_counter],
			callback_data=f'order_{order_id}__action_2{action_index}'
		)

	# –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
	elif action_code == 7:
		status = 4
		action_message["text"] = "–ó–∞–∫–∞–∑ –±—ã–ª –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
		message_text = f'–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ç–æ–º, —á—Ç–æ –≤–∑—è—Ç—ã–π –í–∞–º–∏ –∑–∞–∫–∞–∑:\n _"{order["title"]}"_\n' \
		               f'–±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≤ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –ø–æ—Ä—è–¥–∫–µ!\n\n' \
		               f'_–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑—á–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é._'
		notify_message = {"user_id": executor_id, "from_name": order["owner_name"], "text": message_text}

	# –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
	elif action_code == 6:
		status = 1
		action_message["text"] = "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –ø—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—ã!\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!"
		message_text = f'–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ç–æ–º, —á—Ç–æ –≤–∑—è—Ç—ã–π –í–∞–º–∏ –∑–∞–∫–∞–∑:\n _"{order["title"]}"_\n' \
		               f'–Ω–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∏ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏!\n\n' \
		               f'_–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∑–∞–∫–∞–∑—á–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é._'
		notify_message = {"user_id": executor_id, "from_name": order["owner_name"], "text": message_text}

	# –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–º
	elif action_code == 5:
		status = 3
		action_message["text"] = "–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Ä–∞–±–æ—Ç—ã —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞!"
		message_text = f'–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ç–æ–º, —á—Ç–æ –≤–∑—è—Ç—ã–π –í–∞–º–∏ –∑–∞–∫–∞–∑:\n _"{order["title"]}"_\n' \
		               f'–±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–º!'
		notify_message = {"user_id": executor_id, "from_name": order["owner_name"], "text": message_text}

	# –µ—Å–ª–∏ –∑–∞–∫–∞–∑ —Å–¥–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
	elif action_code == 4:
		status = 2
		action_message["text"] = "–í—ã –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç...\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞!"
		message_text = f'–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ç–æ–º, —á—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –í–∞–º –ø—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–∫–∞–∑—É:\n' \
		               f'_"{order["title"]}"_'
		notify_message = {"user_id": order["owner"], "from_name": order["executor_name"], "text": message_text}

	# –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –æ—Ç–∫–ª–æ–Ω–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–º
	elif action_code == 3:
		status = 1
		params = {"clear_executor": user_id}
		action_message["text"] = "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞!"
		username = context.user_data["details"]["name"] or context.user_data["details"]["username"]
		message_text = f'–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n_"{order["title"]}"_\n' \
		               f'–æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç!'
		decline_notify_message = {"user_id": order["owner"], "from_name": username, "text": message_text}

		# —Å–æ–∑–¥–∞–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π –∫—Ä–æ–º–µ –æ—Ç–∫–∞–∑–∞–≤—à–µ–≥–æ—Å—è –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–∞
		message_text = f'–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ç–æ–º, —á—Ç–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –í–∞–º–∏ –∑–∞–∫–∞–∑:\n _"{order["title"]}"_\n' \
		               f'–ø–æ –ø—Ä–µ–∂–Ω–µ–º—É –∞–∫—Ç—É–∞–ª–µ–Ω!\n–ó–∞–∫–∞–∑—á–∏–∫ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –í–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É.'
		notify_message = {"user_id": [], "from_name": order["owner_name"], "text": message_text}
		for user in order["responded_users"]:
			if user["id"] != user_id:
				notify_message["user_id"].append(user["id"])

	# –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–º
	elif action_code == 2:
		status = 1
		params = {"remove_user": user_id}  # —É–¥–∞–ª–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π
		action_message["text"] = "–í–∞—à —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!"
		username = context.user_data["details"]["name"] or context.user_data["details"]["username"]
		message_text = f'–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n_"{order["title"]}"_' \
		               f'–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ–≥–ª–∞—Å–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É!'
		notify_message = {"user_id": order["owner"], "from_name": username, "text": message_text}

		# —Å–æ–∑–¥–∞–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∫–∞–∑–æ–º –≤—Å–µ–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º –∫—Ä–æ–º–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
		message_text = f'–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ç–æ–º, —á—Ç–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –í–∞–º–∏ –∑–∞–∫–∞–∑:\n _"{order["title"]}"_\n' \
		               f'–±—ã–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–í–æ–∑–º–æ–∂–Ω–æ –≤ –±—É–¥—É—â–µ–º –µ—â–µ —É–¥–∞—Å—Ç—Å—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –í–∞–º–∏.\n–£–¥–∞—á–∏!'
		decline_notify_message = {"user_id": [], "from_name": order["owner_name"], "text": message_text}
		for user in order["responded_users"]:
			if user["id"] != user_id:
				decline_notify_message["user_id"].append(user["id"])

	# –µ—Å–ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∑–∞–∫–∞–∑, —Ç–æ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å
	elif action_code == 1:
		status = 0
		action_message["text"] = "–ó–∞–∫–∞–∑ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
		# —Å–æ–∑–¥–∞–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
		message_text = f'–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ç–æ–º, —á—Ç–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –í–∞–º–∏ –∑–∞–∫–∞–∑:\n _"{order["title"]}"_\n' \
		               f'–±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω —Å–∞–º–∏–º –∑–∞–∫–∞–∑—á–∏–∫–æ–º!'
		notify_message = {"user_id": [], "from_name": order["owner_name"], "text": message_text}
		for user in order["responded_users"]:
			notify_message["user_id"].append(user["id"])

		inline_markup = generate_inline_markup(
			[[ORDER_ACTIONS_KEYBOARD[0]], MODIFY_KEYBOARD, REMOVE_KEYBOARD],
			callback_data=['0', '10', '11'],
			callback_data_prefix=f'order_{order_id}__action_'
		)

	# –µ—Å–ª–∏ –∑–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω, —Ç–æ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É: —Å–Ω—è—Ç—å –∑–∞–∫–∞–∑
	elif action_code == 0:
		status = 1
		action_message["text"] = "–ó–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ!"
		inline_markup = generate_inline_markup(
			[ORDER_ACTIONS_KEYBOARD[1]],
			callback_data=['1'],
			callback_data_prefix=f'order_{order_id}__action_'
		)

	if action_code < 10 or action_code >= 20:
		data = {"status": status} if status is not None else {}
		order, error_text = await update_order(query.message, context, order_id, params=params, data=data)
		if not error_text:
			if order["status"] == 0:  # –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–¥–∞–ª–∏–º —Å —ç–∫—Ä–∞–Ω–∞ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏—Ö—Å—è –∏ –µ–≥–æ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
				await delete_messages_by_key(context, tg_messages)
				tg_messages = []

			# –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
			order_status, _ = get_order_status(order)
			try:
				order_details_message = await query.message.edit_text(
					text=update_text_by_keyword(query.message.text_markdown, "–°—Ç–∞—Ç—É—Å:", f'–°—Ç–∞—Ç—É—Å: *{order_status}*'),
					reply_markup=inline_markup
				)
				# –æ–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
				order_details_message = TGMessage.create_message(order_details_message)

			except TelegramError:
				pass

			# –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –Ω–æ–≤–æ–º —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
			if notify_message:
				await send_notify_message(context, **notify_message)

			# –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± –æ—Ç–∫–∞–∑–µ
			if decline_notify_message:
				await send_notify_message(context, **decline_notify_message)

		else:
			action_message["text"] = error_text

	# –≤—ã–≤–µ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏, –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ—à–∏–±–∫–µ
	if action_message.get("text"):
		action_message.pop("error", None)
		message = await edit_or_reply_message(context, **action_message)
		context.chat_data["last_message_id"] = message.message_id

	section["messages"] = [title_message, order_details_message] + tg_messages
	update_section(context, messages=section["messages"])


async def select_order_executor_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
	""" –ö–æ–ª–±—ç–∫ –≤—ã–±–æ—Ä–∞ –∏ —Å–Ω—è—Ç–∏—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞ """

	query = update.callback_query
	await query.answer()

	query_data = query.data
	query_list = query.data.split('__')

	if len(query_list) < 2:
		return

	user_is_selected = len(query_list) > 2
	order_id = int(query_list[0].lstrip("order_"))
	executor_id = int(query_list[1].lstrip("executor_"))
	order = context.chat_data["orders"][order_id]
	last_message_id = context.chat_data.get("last_message_id", None)

	section = get_section(context)
	tg_messages = section.get("messages", [])
	contender_messages = []
	error_text = None

	if order["status"] == 0:
		error_text = "üö´ –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"

	elif order["status"] > 2:
		error_text = "üö´ –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!"

	if error_text:
		context.chat_data["last_message_id"] = await edit_or_reply_message(context, error_text, message=last_message_id)
		return

	title_message = tg_messages.pop(0)  # –∏–∑–≤–ª–µ—á–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ä–∞–∑–¥–µ–ª–∞
	order_details_message = tg_messages.pop(0)  # –∏–∑–≤–ª–µ—á–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
	contenders_title_message = tg_messages.pop(0)  # –∏–∑–≤–ª–µ—á–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å–ø–∏—Å–∫–∞ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–≤

	inline_markup = None

	# –í—ã–±–µ—Ä–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
	if not user_is_selected:
		order, error_text = await update_order(query.message, context, order_id, data={"executor": executor_id})
		if error_text:
			message_id = await edit_or_reply_message(context, error_text, message=last_message_id)
			context.chat_data["last_message_id"] = message_id
			return

		# —É–¥–∞–ª–∏–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —É –≤—Å–µ—Ö –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–≤ –∫—Ä–æ–º–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
		for message in tg_messages:
			if message.message_id != query.message.message_id:
				details_keyboard = message.reply_markup.inline_keyboard[0][0]
				button = InlineKeyboardButton(details_keyboard.text, callback_data=details_keyboard.callback_data)
				_message = await edit_or_reply_message(
					context,
					text=message.text,
					message=message.message_id,
					reply_markup=InlineKeyboardMarkup([[button]]),
					return_only_id=False
				)

			else:
				# –æ–±–Ω–æ–≤–∏–º –∫–Ω–æ–ø–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
				user_markup = generate_inline_markup(
					[[ORDER_EXECUTOR_KEYBOARD[0], ORDER_EXECUTOR_KEYBOARD[2]]],
					callback_data=["user_" + str(executor_id), query_data + "__is_selected"]
				)
				_message = await query.message.edit_reply_markup(user_markup)

			contender_messages.append(TGMessage.create_message(_message))

	# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω –Ω–∞ —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —Ç–æ –æ—Ç–∫–∞–∂–µ–º—Å—è –æ—Ç –Ω–µ–≥–æ –∏ –æ—Ç–æ–±—Ä–∞–∑–∏–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–≤
	else:
		# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ —Å –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º executor –∏ —É–¥–∞–ª–∏–º –µ–≥–æ –∏–∑ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–≤
		order, error_text = await update_order(query.message, context, order_id, params={"clear_executor": executor_id})
		if error_text:
			message_id = await edit_or_reply_message(context, error_text, message=last_message_id)
			context.chat_data["last_message_id"] = message_id
			return

		# –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–≤
		for message in tg_messages:
			if message.message_id != query.message.message_id:
				details_keyboard = message.reply_markup.inline_keyboard[0][0]
				user_id = details_keyboard.callback_data.lstrip("user_")
				buttons = [
					InlineKeyboardButton(details_keyboard.text, callback_data=details_keyboard.callback_data),
					InlineKeyboardButton(
						ORDER_EXECUTOR_KEYBOARD[1],
						callback_data=f'order_{order["id"]}__executor_{user_id}'
					)
				]

				_message = await edit_or_reply_message(
					context,
					text=message.text,
					message=message.message_id,
					reply_markup=InlineKeyboardMarkup([buttons]),
					return_only_id=False
				)
				contender_messages.append(TGMessage.create_message(_message))

		# —É–¥–∞–ª–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞
		await query.message.delete()

		# –æ–±–Ω–æ–≤–∏–º –∫–Ω–æ–ø–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
		inline_markup = generate_inline_markup(
			ORDER_ACTIONS_KEYBOARD[1],
			callback_data=f'order_{order_id}__status_1'
		)

	# –æ–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞: —Å–º–µ–Ω–∏–º —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–º–µ–Ω–∏–º –∫–Ω–æ–ø–∫—É
	order_status, _ = get_order_status(order)

	modified_text = update_text_by_keyword(order_details_message.text, "–°—Ç–∞—Ç—É—Å:", f'–°—Ç–∞—Ç—É—Å: *{order_status}*')
	_message = await edit_or_reply_message(
		context,
		text=modified_text,
		message=order_details_message.message_id,
		reply_markup=inline_markup,
		return_only_id=False
	)
	order_details_message = TGMessage.create_message(_message)

	update_section(
		context,
		messages=[title_message, order_details_message, contenders_title_message] + contender_messages
	)


async def modify_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
	""" –ö–æ–ª–±—ç–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞ """

	query = update.callback_query
	await query.answer()

	query_data = query.data.split("__")
	button_type = query_data[-1]
	chat_data = context.chat_data
	last_message_ids = chat_data.setdefault("last_message_ids", {})
	local_data = chat_data.setdefault("local_data", {})

	order_title = ORDER_FIELD_DATA.get(button_type, "")
	if order_title:
		local_data["order_field_name"] = button_type
		message_text = f'*{order_title}*\n_–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ_'
		if button_type == "expire_date":
			message_text += " –≤ —Ñ–æ—Ä–º–∞—Ç–µ: _–¥–¥.–º–º.–≥–≥–≥–≥_ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª *Ô∏è‚É£ –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞."
	else:
		message_text = "_‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ!_"

	message = await query.message.reply_text(message_text)
	last_message_ids[button_type] = message.message_id

	return MenuState.MODIFY_ORDER


async def remove_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
	""" –ö–æ–ª–±—ç–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞ """

	query = update.callback_query
	await query.answer()

	query_data = query.data.lstrip('remove_order_').split("__")
	if len(query_data) < 2:
		return

	order_id = int(query_data[0])
	button_type = query_data[-1]
	last_message_id = context.chat_data.get("last_message_id", None)

	if button_type == "yes":
		order, error_text = await update_order(query.message, context, order_id, method="DELETE")
		message_text = "‚úîÔ∏è –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
		if error_text:
			message_text = f'‚ùóÔ∏è{error_text}'
		message_id = await edit_or_reply_message(context, text=message_text, message=last_message_id)
		context.chat_data["last_message_id"] = message_id

	else:
		await delete_messages_by_key(context, last_message_id)


async def new_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
	""" –ö–æ–ª–±—ç–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –±–∏—Ä–∂–µ """

	query = update.callback_query
	if query:
		await query.answer()
	else:
		query = update

	chat_data = context.chat_data
	local_data = chat_data.setdefault("local_data", {})
	order_categories = local_data.get("order_data", {}).get("categories")
	section = get_section(context)
	if section["state"] != MenuState.ADD_ORDER:
		section = await prepare_current_section(context, leave_messages=True)

	state = MenuState.ADD_ORDER
	selected_cat = section.get("selected_cat")

	local_data["order_data"] = {
		"owner": context.user_data["details"]["id"],
		"status": 0,
	}

	# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–∞–º —Ä–∞–∑–º–µ—â–∞–µ—Ç –∑–∞–∫–∞–∑ –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, —Ç–æ –ø–µ—Ä–µ–π–¥–µ–º –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞—á–∏
	if order_categories or selected_cat:
		local_data["order_data"].update({"categories": order_categories or [selected_cat]})
		local_data["order_field_name"] = "title"
		menu_markup = generate_reply_markup([CANCEL_KEYBOARD], one_time_keyboard=False)
		reply_message = await query.message.reply_text(f'–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º –∑–∞–¥–∞—á—É?', reply_markup=menu_markup)
		messages = [reply_message.message_id]

	# –∏–Ω–∞—á–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
	else:
		# local_data["order_data"].update({"categories": []})
		menu_markup = generate_reply_markup([CONTINUE_KEYBOARD], one_time_keyboard=False)
		title = str(state).upper()

		reply_message = await query.message.reply_text(f'*{title}*', reply_markup=menu_markup)
		messages = [reply_message.message_id]

		inline_markup = await generate_categories_list(query.message, context, groups=1, button_type="checkbox")
		if not inline_markup:
			return section["state"]

		subtitle = 'üóÉ –í –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥–µ–º —Ä–∞–∑–º–µ—â–∞—Ç—å –∑–∞—è–≤–∫—É?'
		inline_message = await query.message.reply_text(subtitle, reply_markup=inline_markup)
		messages.append(inline_message.message_id)

	if section["state"] != MenuState.ADD_ORDER:
		add_section(context, state=state, messages=messages, reply_markup=menu_markup)

	else:
		update_section(
			context,
			messages=section["messages"] + messages,
			reply_markup=menu_markup
		)

	return state