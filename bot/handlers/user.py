from typing import Optional

from telegram import Update
from telegram.ext import ContextTypes

from bot.bot_settings import ADMIN_CHAT_ID
from bot.constants.keyboards import REG_GROUP_KEYBOARD, SEGMENT_KEYBOARD
from bot.constants.menus import back_menu, continue_menu, cancel_menu
from bot.constants.messages import select_user_group_message, offer_to_select_segment_message, confirm_region_message
from bot.constants.patterns import CONTINUE_PATTERN, CANCEL_PATTERN
from bot.handlers.common import get_section, prepare_current_section, add_section, generate_categories_list, \
	edit_or_reply_message, delete_messages_by_key, send_error_to_admin, regenerate_inline_keyboard, load_regions, \
	go_back_section, send_message_to
from bot.states.main import MenuState
from bot.utils import match_query, fetch_user_data, format_output_text, extract_fields, fuzzy_compare, \
	dict_to_formatted_text


async def recommend_user_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
	""" –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """

	# TODO: –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω—é–∞–Ω—Å –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥ –Ω–∞ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
	chat_data = context.chat_data
	section = get_section(context)
	query_message = update.message.text

	if match_query(CANCEL_PATTERN, query_message):
		return await go_back_section(update, context, message_text="üö´ –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞!")

	state = section["state"]
	messages = []
	local_data = context.chat_data.setdefault("local_data", {})
	field_name = local_data.setdefault("user_field_name", {})
	selected_groups = local_data.get("selected_groups", [])
	selected_categories = local_data.get("selected_categories", {})
	selected_segment = local_data.get("selected_segment")
	no_selected_groups = field_name == "group" and not selected_groups
	no_selected_categories = field_name == "categories" and not selected_categories
	is_continue = match_query(CONTINUE_PATTERN, query_message)

	if is_continue:
		await update.message.delete()
	else:
		section["messages"].append(update.message.message_id)

	if field_name == "categories" and selected_categories:
		local_data["user_data"]["categories"] = list(selected_categories.keys())
		categories = extract_fields(selected_categories.values(), field_names="name")
		text = format_output_text("‚òëÔ∏è –°—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", categories, tag="*")
		await edit_or_reply_message(context, text, message=section["messages"][-1])

	elif field_name == "segment" and selected_segment:
		local_data["user_data"][field_name] = int(selected_segment)
		text = f'‚òëÔ∏è –°–µ–≥–º–µ–Ω—Ç: *{SEGMENT_KEYBOARD[selected_segment]}*'
		await edit_or_reply_message(context, text, message=section["messages"][-1])

	if not is_continue and field_name in ["group", "categories"] or is_continue and (
			no_selected_categories or no_selected_groups
	):
		text = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –Ω–∞–∂–∞—Ç—å *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å*"
		chat_data["warn_message_id"] = await edit_or_reply_message(
			context,
			text=text,
			message_type="warn",
			reply_markup=continue_menu
		)
		return state

	elif field_name == "name":
		local_data["user_data"] = {field_name: query_message}
		local_data["user_field_name"] = "main_region"

		# –µ—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, —Ç–æ –≤—ã–≤–µ–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–∞–ø –≤–≤–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞
		if not chat_data["region_list"]:
			text = f'‚òëÔ∏è *{query_message}*'
			local_data["user_data"]["main_region"] = None
		else:
			text = '–£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–≥–∏–æ–Ω –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è:'

		message = await update.message.reply_text(text=text, reply_markup=cancel_menu)
		messages.append(message.message_id)

	elif field_name == "main_region" and not local_data["user_data"].get(field_name) and chat_data["region_list"]:
		if is_continue:
			found_region = local_data.get("found_region")
			local_data["user_data"]["main_region"] = found_region["id"] if found_region else None

		else:
			found_region, c, _ = fuzzy_compare(query_message, chat_data["region_list"], "name", 0.3)
			if not found_region:
				text = f'–†–µ–≥–∏–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º *{query_message}* –Ω–µ –Ω–∞–π–¥–µ–Ω!\n' \
				       f'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å*'
				message_id = await edit_or_reply_message(
					context,
					text=text,
					message=update.message.message_id,
					message_type="warn",
					reply_markup=continue_menu
				)
				messages.append(message_id)

			elif c > 0.8:
				local_data["user_data"][field_name] = found_region["id"]
				message = await update.message.reply_text(f'‚òëÔ∏è *{found_region["name"]}*', reply_markup=continue_menu)
				messages.append(message.message_id)

			else:
				local_data["found_region"] = found_region
				title = f'{found_region["name"].upper()}, –≤—Å–µ –≤–µ—Ä–Ω–æ?'
				await confirm_region_message(context, title)  # –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–≥–∏–æ–Ω

	if field_name == "main_region" and "main_region" in local_data["user_data"]:
		chat_data.pop("region_list", None)
		text = "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è?"
		message_id = await select_user_group_message(
			update.message,
			text=text,
			groups_only=[1, 2],
			button_type="radiobutton",
		)
		messages.append(message_id)
		local_data["user_field_name"] = "group"

	elif field_name == "group" and selected_groups:
		# TODO: –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –æ–±—â–µ–µ —Å –∫–æ–¥–æ–º –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
		group_name_list = REG_GROUP_KEYBOARD.copy()
		group = selected_groups[0]
		message_id = await edit_or_reply_message(
			context,
			text=f'‚òëÔ∏è *{group_name_list[group]}*',
			message=section["messages"][-1],
			reply_markup=continue_menu
		)
		messages.append(message_id)

		inline_markup = await generate_categories_list(
			update.message,
			context,
			groups=selected_groups,
			show_all=True,
			button_type="checkbox"
		)
		text = f'–û—Ç–º–µ—Ç—å—Ç–µ –µ–µ —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:'
		message = await update.message.reply_text(text, reply_markup=inline_markup)
		messages.append(message.message_id)
		local_data["user_field_name"] = "categories"

	elif field_name == "categories" and 2 in selected_groups:
		local_data["user_field_name"] = "segment"
		text = "–í –∫–∞–∫–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
		message = await offer_to_select_segment_message(update.message, title=text)
		messages.append(message.message_id)
		text = "–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å*"
		message = await update.message.reply_text(text, reply_markup=continue_menu)
		messages.append(message.message_id)

	elif field_name in ["categories", "segment"]:
		local_data["user_field_name"] = "address"
		message = await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ", reply_markup=continue_menu)
		messages.append(message.message_id)

	elif field_name == "address":
		local_data["user_field_name"] = "phone"
		message = await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, –µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ", reply_markup=continue_menu)
		messages.append(message.message_id)
		if not is_continue:
			local_data["user_data"][field_name] = query_message

	elif field_name == "phone":
		if not is_continue:
			local_data["user_data"][field_name] = query_message
		local_data["user_data"]["access"] = -1
		if not local_data["user_data"].get("main_region"):
			local_data["user_data"].pop("main_region", None)

		res = await fetch_user_data(endpoint='/create/', data=local_data["user_data"], method='POST')
		if res["status_code"] == 201:
			text = "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–∞—Ö.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é!"
			category_list = extract_fields(list(selected_categories.values()), field_names="name")
			categories = format_output_text("–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö", category_list)
			await send_message_to(
				context,
				user_id=ADMIN_CHAT_ID,
				text=f'–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n{res["name"]}\nID: {res["id"]}\n{categories}',
				from_name=context.user_data["details"]["name"],
				from_username=context.user_data["details"]["username"]
			)
		else:
			text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!"
			res.setdefault("request_body", local_data["user_data"])
			await send_error_to_admin(update.message, context, error=res, text=text)
			text += f'\n–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è. –ë—É–¥–µ–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è'

		return await go_back_section(update, context, message_text=text)

	section["messages"].extend(messages)
	await delete_messages_by_key(context, "warn_message_id")

	return state


async def recommend_new_user_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
	# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
	query = update.callback_query
	await query.answer()

	local_data = context.chat_data.setdefault("local_data", {})
	section = await prepare_current_section(context, keep_messages=True)
	query_data = section.get("query_message") or query.data
	# TODO: [task 3]: –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å —É—á–µ—Ç–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–∞—Ö–æ–¥—è—Å—å –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	menu_markup = back_menu
	state = MenuState.RECOMMEND_USER
	# callback = recommend_new_user_callback

	context.chat_data["region_list"], _ = await load_regions(update.message, context)
	local_data["user_field_name"] = "name"
	title = "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—É—é –í—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ?"
	message = await query.message.reply_text(text=title, reply_markup=menu_markup)

	add_section(
		context,
		state=state,
		messages=[message],
		reply_markup=menu_markup,
		query_message=query_data,
		save_full_messages=False
	)

	return state


async def confirm_user_region_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	""" –ö–æ–ª–±—ç–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ """

	query = update.callback_query
	await query.answer()

	button_data = query.data.lstrip("choose_region_")
	local_data = context.chat_data.setdefault("local_data", {})
	found_region = local_data["found_region"]
	section = get_section(context)
	await query.message.delete()

	if button_data == 'yes':
		text = f'‚òëÔ∏è *{found_region["name"]}*'
	else:
		local_data["found_region"].clear()
		text = "–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å*"

	message = await query.message.reply_text(text, reply_markup=continue_menu)
	section["messages"].append(message.message_id)


async def select_user_segment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	""" –ö–æ–ª–±—ç–∫ –≤—ã–±–æ—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """

	query = update.callback_query
	await query.answer()

	segment_index = int(query.data.lstrip("segment_"))
	local_data = context.chat_data.setdefault("local_data", {})
	local_data["selected_segment"] = segment_index
	await regenerate_inline_keyboard(query.message, active_value=query.data, button_type="radiobutton")
