from typing import Union, Optional

from telegram import Update, InputMediaPhoto, InputMediaDocument, ReplyKeyboardMarkup, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from bot.bot_settings import ADMIN_CHAT_ID
from bot.constants.messages import check_file_size_message
from bot.handlers.common import get_section
from bot.logger import log
from bot.states.main import MenuState
from bot.utils import generate_inline_markup, fetch_user_data


async def prepare_shared_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
	""" –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é """

	message = update.message
	chat_data = context.chat_data
	local_data = context.chat_data.setdefault("local_data", {})
	upload_files = context.chat_data.setdefault('upload_files', {'photo': [], 'document': []})
	section = get_section(context)

	# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞, —Ç–æ –Ω–µ –±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	if not section["state"] == MenuState.SUPPORT:
		button = generate_inline_markup(["–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã"], callback_data="upload_files")
	else:
		button = section["reply_markup"]

	oversize_message = await check_file_size_message(message)
	if oversize_message:
		chat_data["last_message_id"] = oversize_message.message_id
		return section["state"]

	if message.photo:
		photo = message.photo[-1]
		upload_files['photo'].append({"id": photo.file_id, "caption": message.caption})

	elif message.document:
		document = message.document
		upload_files['document'].append({"id": document.file_id, "caption": message.caption})

	if message.photo or message.document:
		if message.media_group_id and not message.media_group_id == local_data.get("media_group_id"):
			text = f'–§–∞–π–ª—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!'
			local_data.update({"message.media_group_id": message.media_group_id})
			section["messages"].append(message.message_id)

		elif not message.media_group_id:
			text = f'–§–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!'
			section["messages"].append(message.message_id)

		else:
			text = None

	else:
		text = f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!'

	if text:
		message = await message.reply_text(text, reply_markup=button)
		chat_data["last_message_id"] = message.message_id
		section["messages"].append(message.message_id)

	return section["state"]


async def upload_files_callback(
		update: Update,
		context: ContextTypes.DEFAULT_TYPE,
		text: str = None,
		reply_markup: Optional[InlineKeyboardMarkup] = None
) -> str:
	""" –ö–æ–ª–±—ç–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ """
	query = update.callback_query
	if query:
		await query.answer()
		user = query.from_user
	else:
		query = update
		user = update.effective_user

	chat_data = context.chat_data
	section = get_section(context)

	files = chat_data.get('upload_files')
	if not files:
		message = await query.message.reply_text(f'‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π!')
		chat_data["last_message_id"] = message.message_id
		return section["state"]

	media = {"photo": [], "document": []}
	url_list = []

	for file in files['photo']:
		# –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –Ω–∏–º —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
		file_obj = await context.bot.get_file(file["id"])
		url_list.append(file_obj.file_path)
		# –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã —Ç–∏–ø–∞ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ —á–∞—Ç–µ
		media["photo"].append(InputMediaPhoto(file["id"], caption=file["caption"]))

	for file in files['document']:
		# –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –Ω–∏–º —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
		file_obj = await context.bot.get_file(file["id"])
		url_list.append(file_obj.file_path)
		# –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ —á–∞—Ç–µ
		media["document"].append(InputMediaDocument(file["id"], caption=file["caption"]))

	if media["photo"]:
		await context.bot.send_media_group(chat_id=ADMIN_CHAT_ID, media=media["photo"])

	if media["document"]:
		await context.bot.send_media_group(chat_id=ADMIN_CHAT_ID, media=media["document"])

	# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –û—Ç–≤–µ—Ç–∏—Ç—å
	title = text or f'üó≥ *–§–∞–π–ª—ã –ø—Ä–∏—à–ª–∏ –æ—Ç @{context.user_data["details"]["username"]}*\nID:{user.id}'
	await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f'{title}', reply_markup=reply_markup)

	# —Å–æ—Ö—Ä–∞–Ω–∏–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
	res = await fetch_user_data(user.id, 'upload/', data={'files': url_list}, method="POST")
	if res["status_code"] == 201:

		message_text = res["data"].get("message", "–§–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã!")
		message = await query.message.reply_text(f'*‚úÖ {message_text}*')
		chat_data["last_message_id"] = message.message_id
		chat_data["upload_files"].clear()
		log.info(f'Media files were uploaded on server for user {user.full_name} (ID:{user.id})')

	else:
		log.info(f'Failed to upload files on server for user {user.full_name} (ID:{user.id})')

		# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞, —Ç–æ –Ω–µ –±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
		if not section["state"] == MenuState.SUPPORT:
			button = generate_inline_markup(["–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"], callback_data="message_for_admin")
		else:
			button = None

		await query.message.reply_text(
			'*‚ùóÔ∏è–§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å –æ—à–∏–±–∫–æ–π!*\n'
			'_–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"_',
			reply_markup=button
		)

	return section["state"]


async def share_files_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
	query = update.callback_query
	context.chat_data.setdefault('upload_files', {'photo': [], 'document': []})

	await query.message.edit_text(
		"üìé –î–æ–±–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ç–æ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.",
		reply_markup=None
	)