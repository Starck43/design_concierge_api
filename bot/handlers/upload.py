import requests
from telegram import Update, InputMediaPhoto
from telegram.ext import ContextTypes

from bot.bot_settings import SERVER_URL, ADMIN_CHAT_ID
from bot.constants.messages import check_file_size_message
from bot.handlers.common import delete_messages_by_key
from bot.logger import log
from bot.utils import generate_inline_keyboard, replace_double_slashes


async def share_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
	chat_data = context.chat_data
	upload_files = chat_data['upload_files']

	await delete_messages_by_key(context, "last_message_id")
	oversize_message = await check_file_size_message(update.message, update.message.document or update.message.photo[-1])

	if oversize_message:
		chat_data["last_message_id"] = oversize_message.message_id
		return

	if update.message.photo:
		photo = update.message.photo[-1]
		upload_files['photo'].append(photo.file_id)

	elif update.message.document:
		document = update.message.document
		upload_files['document'].append(document.file_id)

	else:
		message = await update.message.reply_text("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞!\n")
		chat_data["last_message_id"] = message.message_id
		return

	button = generate_inline_keyboard(
		["–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã"],
		callback_data="upload_files",
	)
	message = await update.message.reply_text(
		"–§–∞–π–ª(—ã) –¥–æ–±–∞–≤–ª–µ–Ω!\n"
		"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É _–û—Ç–ø—Ä–∞–≤–∏—Ç—å_",
		reply_markup=button
	)
	chat_data["last_message_id"] = message.message_id


async def share_files_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
	query = update.callback_query
	context.chat_data.setdefault('upload_files', {'photo': [], 'document': []})

	await query.message.edit_text(
		"üìé –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ç–æ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.",
		reply_markup=None
	)


async def upload_files_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
	query = update.callback_query

	user = query.from_user
	files = context.chat_data['upload_files']
	file_ids = files['photo'] + files['document']
	error_file_list = []
	url_list = []

	for file_id in file_ids:
		file_obj = await context.bot.get_file(file_id)
		file_path = file_obj.file_path
		url_list.append(file_path)

	# TODO: –î–æ–¥–µ–ª–∞—Ç—å api –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	api_url = replace_double_slashes(f'{SERVER_URL}/api/upload')
	response = requests.post(api_url, files={'file': url_list}) # await fetch(api_url, data={'files': url_list}, method="POST")

	if response.status_code == 200:
		await query.message.reply_text(
			"*–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!*\n"
			"–ü–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç.\n"
		)

		title = f'–§–∞–π–ª—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context.user_data["details"]["name"]} ID:{user.id}'
		if files['photo']:
			media = [InputMediaPhoto(photo_id, caption=title) for photo_id in files['photo']]
			await context.bot.send_media_group(chat_id=ADMIN_CHAT_ID, media=media)
		if files['document']:
			for document_id in files['document']:
				await context.bot.send_document(chat_id=ADMIN_CHAT_ID, document=document_id, caption=title)

	else:
		log.info(f'Failed to upload files on server for user {user.full_name} (ID:{user.id}')

		button = generate_inline_keyboard(
			["–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"],
			callback_data="message_for_admin",
		)
		await query.message.reply_text(
			"*–§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å –æ—à–∏–±–∫–æ–π!*\n"
			"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n",
			reply_markup=button
		)

	context.chat_data.pop("upload_files", None)
