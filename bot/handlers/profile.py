import re
from typing import Optional

from telegram import Update, Message
from telegram.ext import ContextTypes

from bot.constants.common import TARIFF_LIST, PROFILE_FIELD_SET
from bot.constants.menus import profile_menu, continue_menu, back_menu
from bot.constants.messages import send_unknown_question_message
from bot.constants.patterns import TARIFF_PATTERN, FAVOURITE_PATTERN, SETTINGS_PATTERN
from bot.handlers.common import edit_last_message, get_menu_item, delete_messages_by_key, add_menu_item, \
	update_menu_item
from bot.handlers.details import show_user_details
from bot.states.group import Group
from bot.states.main import MenuState
from bot.utils import generate_reply_keyboard, generate_inline_keyboard, update_inline_keyboard, match_message_text


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
	user_data = context.user_data
	priority_group = user_data["priority_group"].value
	keyboard = profile_menu[priority_group]

	chat_data = context.chat_data
	chat_data["selected_user"] = user_data["details"]

	menu_markup = generate_reply_keyboard(keyboard)
	state = MenuState.PROFILE
	title = f'{str(state)}\n*{user_data["details"]["username"].upper()}*'
	edit_profile_markup = generate_inline_keyboard(["üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"], callback_data="edit_user_details")

	add_menu_item(context, state, None, None, menu_markup, edit_profile_markup)

	# –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	message = await show_user_details(update, context, title=title, show_all=True)
	update_menu_item(context, message=message, inline_messages=chat_data.get("saved_details_message"))

	return state


async def profile_options_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
	""" –†–∞–∑–¥–µ–ª –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ """
	user_data = context.user_data
	access = user_data["details"].get("access", 0)
	chat_data = context.chat_data
	message_text = update.message.text
	tariff = TARIFF_LIST[access]
	menu_markup = back_menu
	inline_message = None

	await delete_messages_by_key(context, "saved_details_message")
	await delete_messages_by_key(context, "last_message_id")

	if match_message_text(TARIFF_PATTERN, message_text):
		state = MenuState.TARIFF_CHANGE
		message = await update.message.reply_text(
			f'–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: *{tariff.upper()}*',
			reply_markup=menu_markup
		)

		edit_buttons = generate_inline_keyboard(
			TARIFF_LIST,
			callback_data_prefix="tariff_",
			vertical=True
		)
		inline_message = await edit_last_message(
			update,
			context,
			text=f'–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É',
			reply_markup=edit_buttons
		)
		chat_data["last_message_ids"] = [inline_message.message_id]

	elif match_message_text(FAVOURITE_PATTERN, message_text):
		# TODO: [task 6]: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		state = MenuState.FAVOURITE_CHOICE
		message = await update.message.reply_text(
			f'*{str(state).upper()}*',
			reply_markup=back_menu
		)

	elif match_message_text(SETTINGS_PATTERN, message_text):
		# —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		state = MenuState.SETTINGS
		message = await update.message.reply_text(
			f'_–≤ —Å—Ç–∞–¥–∏–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏..._',
			reply_markup=back_menu
		)

	else:
		state, message, inline_message, menu_markup, _ = get_menu_item(context)
		await send_unknown_question_message(update.message)

	add_menu_item(context, state, message, inline_message, menu_markup)

	return state


async def edit_user_details_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	""" –ö–æ–ª–±—ç–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
	query = update.callback_query

	await query.answer()
	fields = context.bot_data.get("user_field_names")
	priority_group = context.user_data["priority_group"]

	if priority_group == Group.UNCATEGORIZED:
		await query.message.reply_text(
			f'‚ö†Ô∏è –ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
		)
		return None

	if not fields:
		await query.message.reply_text(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã {priority_group}!')
		return None

	field_keys = []
	field_names = []
	# TODO: –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç group
	for key in PROFILE_FIELD_SET[priority_group.value]:
		value = fields.get(key)
		if value:
			field_keys.append(key)
			field_names.append(value)

	field_buttons = generate_inline_keyboard(
		[field_names],
		callback_data=[field_keys],
		callback_data_prefix="edit_field_",
		vertical=True
	)

	await edit_last_message(query, context, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", field_buttons)


async def edit_details_fields_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	""" –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
	# TODO: [task 5]:
	#  –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—é –∏–∑ —Å–ø–∏—Å–∫–∞ PROFILE_FIELD_SET

	query = update.callback_query

	await query.answer()
	field_name = query.data.lstrip("edit_field_")
	bot_data = context.bot_data
	fields = bot_data.get("user_field_names")

	title = fields.get(field_name)
	if title:
		await query.message.reply_text(f"üñä {title}:")


async def choose_tariff_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	""" –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
	query = update.callback_query

	await query.answer()
	button_data = int(query.data.lstrip("tariff_"))
	tariff = TARIFF_LIST[button_data]
	updated_keyboard = update_inline_keyboard(
		query.message.reply_markup.inline_keyboard,
		active_value=query.data,
		# button_type='radiobutton'
	)
	current_access = context.user_data["details"]["access"]

	if current_access == button_data:
		text = f'‚ÑπÔ∏è –¢–∞—Ä–∏—Ñ *{tariff.upper()}* —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ'
	elif button_data == 0:
		text = f'‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ *{tariff.upper()}*\n_–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ –æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è._'
	else:
		text = f'‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ *{tariff.upper()}*\n_–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É._'

	await query.message.edit_text(text=text, reply_markup=updated_keyboard)
	# —Å–æ—Ö—Ä–∞–Ω–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏ id —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –û—á–∏—â–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	context.chat_data["selected_tariff"] = button_data
