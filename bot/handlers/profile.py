from typing import Optional

from django.core.exceptions import ValidationError
from django.core.validators import validate_email
from telegram import Update
from telegram.ext import ContextTypes

from bot.constants.menus import profile_menu, back_menu, cancel_menu
from bot.constants.keyboards import (
	FAVORITES_KEYBOARD, MODIFY_KEYBOARD, CANCEL_KEYBOARD, SAVE_KEYBOARD, BACK_KEYBOARD, TARIFF_KEYBOARD
)
from bot.constants.patterns import (
	TARIFF_PATTERN, FAVOURITE_PATTERN, SETTINGS_PATTERN, SUPPORT_PATTERN, BACK_PATTERN, CANCEL_PATTERN, SAVE_PATTERN
)
from bot.constants.static import EXCLUDED_GROUP_FIELDS
from bot.handlers.common import (
	edit_or_reply_message, prepare_current_section, add_section, go_back_section, generate_users_list,
	load_favourites, load_user_field_names, generate_categories_list, load_regions, get_section, select_region,
	delete_messages_by_key, show_chat_group_links
)
from bot.handlers.details import show_user_card_message
from bot.states.group import Group
from bot.states.main import MenuState
from bot.utils import (
	generate_reply_markup, generate_inline_markup, update_inline_markup, match_query, extract_fields,
	format_output_text, fetch_user_data, list_to_dict, remove_button_from_keyboard, add_button_to_keyboard,
	is_phone_number, format_phone_number
)


async def profile_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
	user_data = context.user_data
	user = user_data["details"]
	priority_group = user_data["priority_group"]

	section = await prepare_current_section(context)
	query_message = section.get("query_message") or update.message.text

	state = MenuState.PROFILE
	keyboard = profile_menu[priority_group.value]
	menu_markup = generate_reply_markup(keyboard)
	profile_markup = generate_inline_markup(MODIFY_KEYBOARD, callback_data="profile_modify")
	title = f'{"üí† " if user["user_id"] else ""}{state}\n'
	title += f'*{user["name"].upper()}*\n'
	reply_message = await update.message.reply_text(title, reply_markup=menu_markup)
	inline_message = await show_user_card_message(context, user=user, reply_markup=profile_markup, show_all=True)

	await show_chat_group_links(update, context, hide_joined_groups=True)

	add_section(
		context,
		state=state,
		query_message=query_message,
		messages=[update.message, reply_message, inline_message],
		reply_markup=menu_markup,
	)

	return state


async def profile_sections_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
	""" –†–∞–∑–¥–µ–ª –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' """

	user_data = context.user_data
	access = user_data["details"].get("access", 0)

	chat_data = context.chat_data
	section = await prepare_current_section(context, keep_messages=True)
	query_message = section.get("query_message") or update.message.text
	callback = profile_sections_choice
	menu_markup = back_menu
	tariff = TARIFF_KEYBOARD[access]
	messages = [update.message]

	# –ü–æ–¥—Ä–∞–∑–¥–µ–ª - –ò–ó–ë–†–ê–ù–ù–û–ï
	# TODO: –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –ø–æ –≥—Ä—É–ø–ø–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π [1, 2]
	if match_query(FAVOURITE_PATTERN, query_message):
		state = MenuState.FAVOURITES
		title = FAVORITES_KEYBOARD[0].upper()
		message = await update.message.reply_text(f'*{title}*', reply_markup=menu_markup)

		users, error_text = await load_favourites(update.message, context)
		if not users:
			if not error_text:
				error_text = "–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç!"
			inline_message = await update.message.reply_text(error_text, reply_markup=menu_markup)

		else:
			subtitle = "–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:"
			inline_markup = generate_users_list(users)
			inline_message = await update.message.reply_text(subtitle, reply_markup=inline_markup)

		messages.extend([message, inline_message])

	# –ü–æ–¥—Ä–∞–∑–¥–µ–ª - –¢–ê–†–ò–§–´
	elif match_query(TARIFF_PATTERN, query_message):
		state = MenuState.TARIFF_CHANGE
		inline_markup = generate_inline_markup(TARIFF_KEYBOARD, callback_data_prefix="tariff_", vertical=True)

		reply_message = await edit_or_reply_message(
			context,
			text=f'*–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ*: `{tariff.upper()}`',
			message=chat_data.get("last_message_id"),
			reply_markup=menu_markup
		)

		inline_message = await update.message.reply_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:', reply_markup=inline_markup)
		messages.extend([reply_message, inline_message])

	# –ü–æ–¥—Ä–∞–∑–¥–µ–ª - –ù–ê–ü–ò–°–ê–¢–¨ –í –ü–û–î–î–ï–†–ñ–ö–£
	elif match_query(SUPPORT_PATTERN, query_message):
		state = MenuState.SUPPORT
		title = str(state).upper()
		context.chat_data["local_data"] = {'message_for_admin': {"chat_id": update.effective_chat.id, "question": ""}}
		reply_message = await update.message.reply_text(f'*{title}*', reply_markup=menu_markup)
		inline_message = await update.message.reply_text(f'–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å')
		messages.extend([reply_message, inline_message])

	# –ü–æ–¥—Ä–∞–∑–¥–µ–ª - –ù–ê–°–¢–†–û–ô–ö–ò
	elif match_query(SETTINGS_PATTERN, query_message):
		# TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		state = MenuState.SETTINGS
		message = await update.message.reply_text(
			f'_–í —Å—Ç–∞–¥–∏–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏..._',
			reply_markup=menu_markup
		)
		messages.append(message)

	else:
		return await go_back_section(update, context)

	add_section(
		context,
		state,
		query_message=query_message,
		messages=messages,
		reply_markup=menu_markup,
		save_full_messages=False,
		callback=callback
	)

	return state


async def modify_user_field_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
	""" –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """

	chat_data = context.chat_data
	section = get_section(context)
	if update.message:
		query_message = update.message.text
		section["messages"].append(update.message.message_id)
	else:
		query_message = ""

	state = section["state"]
	user_details = context.user_data["details"]
	last_message_ids = chat_data.setdefault("last_message_ids", {})
	local_data = chat_data["local_data"]
	current_field: dict = local_data.get("current_field")

	field_name = current_field.get("name")
	field_title = current_field.get("title")
	field_value = query_message or current_field.get("value")

	if match_query(CANCEL_PATTERN, query_message):
		await update.message.delete()
		if isinstance(user_details[field_name], list):
			await delete_messages_by_key(context, last_message_ids.get(field_name))
			await delete_messages_by_key(context, "last_message_ids")
			local_data[f"selected_{field_name}"] = list_to_dict(user_details[field_name], "id", *["name"])

		chat_data["last_message_id"] = await edit_or_reply_message(
			context,
			text=f'–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!',
			message=chat_data.get("last_message_id"),
			delete_before_reply=True,
			message_type="info",
			reply_markup=section["reply_markup"]
		)
		current_field.clear()
		return state

	elif match_query(BACK_PATTERN, query_message):
		await delete_messages_by_key(context, "last_message_id")
		message = section["cancel_message_data"]
		await show_user_card_message(
			context,
			user=user_details,
			message_id=message["message_id"],
			reply_markup=message["inline_markup"],
			show_all=True
		)
		return await go_back_section(update, context, message_text=message["message_text"])

	elif query_message and not current_field:
		context.chat_data["warn_message_id"] = await edit_or_reply_message(
			context,
			text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è!",
			message=context.chat_data.get("warn_message_id"),
			delete_before_reply=True,
			message_type="warn",
			reply_markup=section["reply_markup"]
		)
		return state

	if field_name == "categories":
		if match_query(SAVE_PATTERN, query_message):
			await update.message.delete()
			selected_categories = chat_data["local_data"]["selected_categories"]
			field_data = list(selected_categories.keys())
			field_value = extract_fields(selected_categories.values(), field_names="name")
		else:
			context.chat_data["warn_message_id"] = await edit_or_reply_message(
				context,
				text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ *–°–æ—Ö—Ä–∞–Ω–∏—Ç—å*!",
				message=context.chat_data.get("warn_message_id"),
				delete_before_reply=True,
				message_type="warn",
				reply_markup=section["save_reply_markup"]
			)
			return state

	elif field_name == "main_region":
		# –ø–æ–ª—É—á–∏–º –æ–±—ä–µ–∫—Ç —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
		if query_message:
			found_region = await select_region(context, region_name=query_message, reply_markup=section["reply_markup"])
			if found_region:
				await add_user_region(update, context, found_region)
			else:
				return state

		field_value = "\n" + current_field.get("value")
		field_data = current_field.get("data")

	elif field_name == "regions":
		selected_regions = local_data.setdefault("selected_regions", {})

		if match_query(SAVE_PATTERN, query_message):
			await update.message.delete()
			field_data = list(selected_regions.keys())
			field_value = extract_fields(selected_regions.values(), field_names="name")

		else:
			# –ø–æ–ª—É—á–∏–º –æ–±—ä–µ–∫—Ç —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
			if query_message:
				found_region = await select_region(
					context,
					region_name=query_message,
					reply_markup=section["reply_markup"]
				)
				if found_region:
					await add_user_region(update, context, found_region)
				else:
					return state

			selected_region_id = current_field.get("data")
			main_region_id = user_details.get("main_region", {}).get("id")
			warning_text = None
			if selected_regions.get(selected_region_id):
				warning_text = "–†–µ–≥–∏–æ–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –í–∞—à–µ–º —Å–ø–∏—Å–∫–µ!"
			elif selected_region_id == main_region_id:
				warning_text = "–†–µ–≥–∏–æ–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —É–∫–∞–∑–∞–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π!"

			if warning_text:
				context.chat_data["warn_message_id"] = await edit_or_reply_message(
					context,
					text=warning_text,
					message=context.chat_data.get("warn_message_id"),
					delete_before_reply=True,
					message_type="warn",
					reply_markup=section["save_reply_markup"]
				)
			else:
				# —Å–æ—Ö—Ä–∞–Ω–∏–º —Ä–µ–≥–∏–æ–Ω –≤ selected_regions –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
				selected_regions[selected_region_id] = {"name": current_field["value"]}
				message = chat_data.get("temp_messages", {}).get("regions", None)

				regions_inline_markup = message.reply_markup if message else None
				# –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ temp_messages["regions"]
				reply_markup = add_button_to_keyboard(
					regions_inline_markup,
					text=f'{current_field["value"]} ‚úñÔ∏è',
					callback_data=f'region_{current_field["data"]}'
				)

				if message:
					await message.edit_reply_markup(reply_markup)

				else:
					message = await update.message.reply_text(f'üñä –¢–µ–∫—É—â–∏–µ —Ä–µ–≥–∏–æ–Ω—ã:', reply_markup=reply_markup)
					last_message_ids[field_name] = message.message_id
					# —Å–æ—Ö—Ä–∞–Ω–∏–º —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
					chat_data["temp_messages"] = {"regions": message}

				chat_data["last_message_id"] = await edit_or_reply_message(
					context,
					text=f'–†–µ–≥–∏–æ–Ω *{current_field["value"]}* –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!',
					message=chat_data.get("last_message_id"),
					delete_before_reply=True,
					reply_markup=section["save_reply_markup"]
				)
			return state

	elif field_name == "phone":
		if is_phone_number(query_message):
			query_message = format_phone_number(query_message)
			field_value = "\n" + query_message
			field_data = query_message

		else:
			context.chat_data["warn_message_id"] = await edit_or_reply_message(
				context,
				text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!",
				message=context.chat_data.get("warn_message_id"),
				delete_before_reply=True,
				message_type="warn",
				reply_markup=section["reply_markup"]
			)
			return state

	elif field_name == "email":
		try:
			validate_email(query_message)
			field_value = "\n" + field_value
			field_data = query_message

		except ValidationError:
			context.chat_data["warn_message_id"] = await edit_or_reply_message(
				context,
				text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞!",
				message=context.chat_data.get("warn_message_id"),
				delete_before_reply=True,
				message_type="warn",
				reply_markup=section["reply_markup"]
			)
			return state

	else:  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä–æ–∫–µ
		field_value = "\n" + field_value
		field_data = query_message

	# –æ–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
	user_id = context.user_data["details"]["id"]
	res = await fetch_user_data(user_id=user_id, data={field_name: field_data}, method='PATCH')
	if res["data"]:
		context.user_data["details"] = res["data"]
		text = format_output_text(f'‚òëÔ∏è *{field_title}* _({"–∏–∑–º–µ–Ω–µ–Ω–æ" if field_data else "—É–¥–∞–ª–µ–Ω–æ"})_', field_value, tag="`")
		last_message_ids[field_name] = await edit_or_reply_message(
			context,
			text=text,
			message=last_message_ids.get(field_name),
			delete_before_reply=True,
			reply_markup=section["reply_markup"]
		)
		current_field.clear()

	else:
		context.chat_data["warn_message_id"] = await edit_or_reply_message(
			context,
			text="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É",
			message=context.chat_data.get("warn_message_id"),
			delete_before_reply=True,
			message_type="error",
			reply_markup=section["reply_markup"]
		)

	return state


async def add_user_region(update: Update, context: ContextTypes.DEFAULT_TYPE, new_region: dict) -> Optional[str]:
	chat_data = context.chat_data
	local_data = chat_data.setdefault("local_data", {})

	local_data["current_field"].update({
		"value": new_region["name"],
		"data": new_region["id"]
	})
	if not update.message:
		return await modify_user_field_choice(update, context)


async def modify_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
	""" –ö–æ–ª–±—ç–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """

	query = update.callback_query
	await query.answer()

	fields = await load_user_field_names(update.message, context)
	priority_group = context.user_data["priority_group"]

	if not fields or priority_group == Group.UNCATEGORIZED:
		if not fields:
			text = "‚ùó –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ!"
		else:
			text = f'‚ùóÔ∏è –£ –í–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'

		context.chat_data["warn_message_id"] = await edit_or_reply_message(
			context,
			text=text,
			message=context.chat_data.get("warn_message_id"),
			message_type="warn"
		)
		return

	query_data = query.data
	mode = query_data.lstrip("profile_")
	section = await prepare_current_section(context, keep_messages=True)
	menu_markup = generate_reply_markup(BACK_KEYBOARD)
	state = MenuState.MODIFY_PROFILE

	if mode == "cancel":
		# TODO: –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
		await query.edit_message_reply_markup(section["cancel_message_data"]["inline_markup"])
		return await go_back_section(update, context, section["cancel_message_data"]["message_text"])

	profile_markup = generate_inline_markup(CANCEL_KEYBOARD, callback_data="profile_cancel")
	await query.edit_message_reply_markup(profile_markup)

	profile_fields = fields.copy()

	for field_name in EXCLUDED_GROUP_FIELDS[priority_group.value]:
		profile_fields.pop(field_name, None)

	inline_markup = generate_inline_markup(
		list(profile_fields.values()),
		callback_data=list(profile_fields.keys()),
		callback_data_prefix="modify_field_",
		vertical=True
	)

	# –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞–∑–¥–µ–ª–µ.
	# –ï—Å–ª–∏ —ç—Ç–æ id, —Ç–æ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –µ–≥–æ —É–¥–∞–ª–∏–º
	last_message = section["messages"][-1] if isinstance(section["messages"][-1], int) else None
	reply_message = await edit_or_reply_message(
		context,
		"–ß—Ç–æ –±—É–¥–µ–º –∏–∑–º–µ–Ω—è—Ç—å?",
		message=last_message,
		return_message_id=False,
		delete_before_reply=True,
		reply_markup=menu_markup
	)
	inline_message = await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=inline_markup)

	cancel_message_data = {
		"inline_markup": generate_inline_markup(MODIFY_KEYBOARD, callback_data="profile_modify"),
		"message_id": query.message.message_id,
		"message_text": "–í—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
	}

	add_section(
		context,
		state,
		query_message=query_data,
		messages=[reply_message, inline_message],
		reply_markup=menu_markup,
		keep_messages=False,
		save_reply_markup=generate_reply_markup([SAVE_KEYBOARD]),
		cancel_message_data=cancel_message_data
		# callback=callback
	)

	return state


async def remove_region_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	""" –ö–æ–ª–±—ç–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ —Å–ø–∏–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ """

	query = update.callback_query
	await query.answer()

	region_id = int(query.data.lstrip("region_"))
	section = get_section(context)
	chat_data = context.chat_data
	local_data = chat_data.setdefault("local_data", {})

	removed_region = local_data["selected_regions"].pop(region_id, None)
	inline_markup = remove_button_from_keyboard(query.message.reply_markup, query.data)
	message = await query.message.edit_reply_markup(inline_markup)
	chat_data["temp_messages"] = {"regions": message}

	chat_data["last_message_id"] = await edit_or_reply_message(
		context,
		text=f'–†–µ–≥–∏–æ–Ω *{removed_region["name"]}* –±—ã–ª —É–¥–∞–ª–µ–Ω!',
		message=chat_data.get("last_message_id"),
		delete_before_reply=True,
		reply_markup=section["save_reply_markup"]
	)


async def modify_user_data_fields_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	""" –ö–æ–ª–±—ç–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """

	query = update.callback_query
	await query.answer()

	field_name = query.data.split("modify_field_")[-1]
	section = get_section(context)
	user_details = context.user_data["details"]
	chat_data = context.chat_data
	local_data = context.chat_data.setdefault("local_data", {})
	last_message_ids = context.chat_data.setdefault("last_message_ids", {})
	inline_markup = None
	is_error = False

	fields = await load_user_field_names(update.message, context)
	title = fields.get(field_name)
	if not title:
		is_error = True
		text = "–ü–æ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è!\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"

	else:
		# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª–µ–º –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
		local_data["current_field"] = {"name": field_name, "title": title, "value": None}
		text = f'*{title}* _(—Ç–µ–∫—É—â–µ–µ)_:'

		if field_name == "categories":
			local_data["selected_categories"] = list_to_dict(user_details["categories"], "id", *["name"])
			cat_ids = list(local_data["selected_categories"].keys())
			inline_markup = await generate_categories_list(
				update.message,
				context,
				groups=user_details["groups"],
				show_all=True,
				checked_ids=cat_ids,
				button_type="checkbox"
			)
			text = title

		elif field_name == "main_region":
			chat_data["region_list"], _ = await load_regions(query.message, context)
			if not chat_data["region_list"]:
				is_error = True
				text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É —Ä–µ–≥–∏–æ–Ω–æ–≤!\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"
			else:
				value = user_details[field_name].get("name")
				text += f'\n`{value}`' if value else "_ –ø—É—Å—Ç–æ_"

		elif field_name == "regions":
			chat_data["region_list"], _ = await load_regions(query.message, context)
			if not chat_data["region_list"]:
				is_error = True
				text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É —Ä–µ–≥–∏–æ–Ω–æ–≤!\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"

			else:
				text = ""
				if user_details["regions"]:
					text = "–¢–µ–∫—É—â–∏–µ —Ä–µ–≥–∏–æ–Ω—ã"
					local_data["selected_regions"] = list_to_dict(user_details["regions"], "id", *["name"])
					inline_markup = generate_inline_markup(
						user_details["regions"],
						item_key="name",
						callback_data="id",
						item_prefix="‚úñÔ∏è",
						callback_data_prefix="region_"
					)

		else:
			value = user_details[field_name]
			text += f'\n`{value}`' if value else " _–ø—É—Å—Ç–æ_"

	if not is_error:
		if text:
			message = await edit_or_reply_message(
				context,
				text=f'üñä {text}:',
				message=last_message_ids.get(field_name),
				return_message_id=False,
				delete_before_reply=True,
				reply_markup=inline_markup
			)
			last_message_ids[field_name] = message.message_id
		else:
			message = None

		if field_name == "categories":
			chat_data["last_message_id"] = await edit_or_reply_message(
				context,
				text=f'–ò–∑–º–µ–Ω–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞–∂–º–∏—Ç–µ *–°–æ—Ö—Ä–∞–Ω–∏—Ç—å*',
				message=chat_data.get("last_message_id"),
				delete_before_reply=True,
				message_type="info",
				reply_markup=section["save_reply_markup"]
			)

		elif field_name == "regions":
			chat_data["temp_messages"] = {"regions": message}  # —Å–æ—Ö—Ä–∞–Ω–∏–º —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
			if not user_details["regions"]:
				text = "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã"
			else:
				text = "–í—ã–±–∏—Ä–∞–π—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ —Ä–µ–≥–∏–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ"

			chat_data["last_message_id"] = await edit_or_reply_message(
				context,
				text=text + ", –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ *–°–æ—Ö—Ä–∞–Ω–∏—Ç—å*",
				message=chat_data.get("last_message_id"),
				delete_before_reply=True,
				message_type="info",
				reply_markup=cancel_menu
			)

		else:
			chat_data["last_message_id"] = await edit_or_reply_message(
				context,
				text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',
				message=chat_data.get("last_message_id"),
				delete_before_reply=True,
				reply_markup=cancel_menu
			)

	else:
		context.chat_data["warn_message_id"] = await edit_or_reply_message(
			context,
			text=text,
			message=context.chat_data.get("warn_message_id"),
			delete_before_reply=True,
			message_type="error"
		)


async def choose_tariff_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	""" –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
	query = update.callback_query

	await query.answer()
	button_data = int(query.data.lstrip("tariff_"))
	tariff = TARIFF_KEYBOARD[button_data]
	current_access = context.user_data["details"]["access"]

	if current_access == button_data:
		text = f'‚ÑπÔ∏è –¢–∞—Ä–∏—Ñ *{tariff.upper()}* —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ'
	elif button_data == 0:
		text = f'‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ *{tariff.upper()}*\n_–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ –æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è._'
	else:
		text = f'‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ *{tariff.upper()}*\n_–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É._'

	keyboard = query.message.reply_markup.inline_keyboard
	updated_keyboard = update_inline_markup(keyboard, active_value=query.data, button_type='radiobutton')
	await query.message.edit_text(text=text, reply_markup=updated_keyboard)

	# —Å–æ—Ö—Ä–∞–Ω–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏ id —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –û—á–∏—â–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	context.chat_data["selected_tariff"] = button_data
